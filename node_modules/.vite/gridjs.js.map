{
  "version": 3,
  "sources": ["../gridjs/node_modules/preact/dist/preact.mjs", "../gridjs/src/util/id.ts", "../gridjs/src/base.ts", "../gridjs/src/i18n/en_US.ts", "../gridjs/src/i18n/language.ts", "../gridjs/src/view/base.tsx", "../gridjs/src/util/getConfig.ts", "../gridjs/src/view/htmlElement.tsx", "../gridjs/src/util/html.ts", "../gridjs/src/cell.ts", "../gridjs/src/pipeline/processor.ts", "../gridjs/src/row.ts", "../gridjs/src/tabular.ts", "../gridjs/src/util/array.ts", "../gridjs/src/util/eventEmitter.ts", "../gridjs/src/pipeline/filter/globalSearch.ts", "../gridjs/src/operator/search.ts", "../gridjs/src/util/className.ts", "../gridjs/src/view/base/store.ts", "../gridjs/src/plugin.ts", "../gridjs/src/view/plugin/search/store.ts", "../gridjs/src/view/base/actions.ts", "../gridjs/src/view/plugin/search/actions.ts", "../gridjs/src/pipeline/filter/serverGlobalSearch.ts", "../gridjs/src/util/log.ts", "../gridjs/src/view/plugin/search/search.tsx", "../gridjs/src/util/debounce.ts", "../gridjs/src/pipeline/limit/pagination.ts", "../gridjs/src/pipeline/limit/serverPagination.ts", "../gridjs/src/view/plugin/pagination.tsx", "../gridjs/src/util/width.ts", "../gridjs/src/view/table/shadow.tsx", "../gridjs/src/util/string.ts", "../gridjs/src/header.ts", "../gridjs/src/util/dispatcher.ts", "../gridjs/src/storage/storage.ts", "../gridjs/src/storage/memory.ts", "../gridjs/src/storage/server.ts", "../gridjs/src/storage/storageUtils.ts", "../gridjs/src/pipeline/pipeline.ts", "../gridjs/src/types.ts", "../gridjs/src/pipeline/extractor/storage.ts", "../gridjs/src/pipeline/transformer/arrayToTabular.ts", "../gridjs/src/pipeline/initiator/server.ts", "../gridjs/src/pipeline/transformer/storageResponseToArray.ts", "../gridjs/src/pipeline/pipelineUtils.ts", "../gridjs/src/config.ts", "../gridjs/node_modules/preact/hooks/dist/hooks.mjs", "../gridjs/src/view/table/td.tsx", "../gridjs/src/view/table/tr.tsx", "../gridjs/src/view/table/messageRow.tsx", "../gridjs/src/view/table/tbody.tsx", "../gridjs/src/pipeline/sort/native.ts", "../gridjs/src/view/plugin/sort/store.ts", "../gridjs/src/view/plugin/sort/actions.ts", "../gridjs/src/pipeline/sort/server.ts", "../gridjs/src/view/plugin/sort/sort.tsx", "../gridjs/src/view/plugin/resize/resize.tsx", "../gridjs/src/util/throttle.ts", "../gridjs/src/view/table/th.tsx", "../gridjs/src/view/table/thead.tsx", "../gridjs/src/util/table.ts", "../gridjs/src/view/table/table.tsx", "../gridjs/src/view/headerContainer.tsx", "../gridjs/src/view/footerContainer.tsx", "../gridjs/src/view/container.tsx", "../gridjs/src/grid.ts"],
  "sourcesContent": ["var n,l,u,i,t,o,r={},f=[],e=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function c(n,l){for(var u in l)n[u]=l[u];return n}function s(n){var l=n.parentNode;l&&l.removeChild(n)}function a(n,l,u){var i,t,o,r=arguments,f={};for(o in l)\"key\"==o?i=l[o]:\"ref\"==o?t=l[o]:f[o]=l[o];if(arguments.length>3)for(u=[u],o=3;o<arguments.length;o++)u.push(r[o]);if(null!=u&&(f.children=u),\"function\"==typeof n&&null!=n.defaultProps)for(o in n.defaultProps)void 0===f[o]&&(f[o]=n.defaultProps[o]);return v(n,f,i,t,null)}function v(l,u,i,t,o){var r={type:l,props:u,key:i,ref:t,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++n.__v:o};return null!=n.vnode&&n.vnode(r),r}function h(){return{current:null}}function y(n){return n.children}function p(n,l){this.props=n,this.context=l}function d(n,l){if(null==l)return n.__?d(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return\"function\"==typeof n.type?d(n):null}function _(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return _(n)}}function k(l){(!l.__d&&(l.__d=!0)&&u.push(l)&&!b.__r++||t!==n.debounceRendering)&&((t=n.debounceRendering)||i)(b)}function b(){for(var n;b.__r=u.length;)n=u.sort(function(n,l){return n.__v.__b-l.__v.__b}),u=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=c({},t)).__v=t.__v+1,I(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?d(t):o,t.__h),T(u,t),t.__e!=o&&_(t)))})}function m(n,l,u,i,t,o,e,c,s,a){var h,p,_,k,b,m,w,A=i&&i.__k||f,P=A.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(k=u.__k[h]=null==(k=l[h])||\"boolean\"==typeof k?null:\"string\"==typeof k||\"number\"==typeof k||\"bigint\"==typeof k?v(null,k,null,null,k):Array.isArray(k)?v(y,{children:k},null,null,null):k.__b>0?v(k.type,k.props,k.key,null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(_=A[h])||_&&k.key==_.key&&k.type===_.type)A[h]=void 0;else for(p=0;p<P;p++){if((_=A[p])&&k.key==_.key&&k.type===_.type){A[p]=void 0;break}_=null}I(n,k,_=_||r,t,o,e,c,s,a),b=k.__e,(p=k.ref)&&_.ref!=p&&(w||(w=[]),_.ref&&w.push(_.ref,null,k),w.push(p,k.__c||b,k)),null!=b?(null==m&&(m=b),\"function\"==typeof k.type&&null!=k.__k&&k.__k===_.__k?k.__d=s=g(k,s,n):s=x(n,k,_,A,b,s),a||\"option\"!==u.type?\"function\"==typeof u.type&&(u.__d=s):n.value=\"\"):s&&_.__e==s&&s.parentNode!=n&&(s=d(_))}for(u.__e=m,h=P;h--;)null!=A[h]&&(\"function\"==typeof u.type&&null!=A[h].__e&&A[h].__e==u.__d&&(u.__d=d(i,h+1)),L(A[h],A[h]));if(w)for(h=0;h<w.length;h++)z(w[h],w[++h],w[++h])}function g(n,l,u){var i,t;for(i=0;i<n.__k.length;i++)(t=n.__k[i])&&(t.__=n,l=\"function\"==typeof t.type?g(t,l,u):x(u,t,t,n.__k,t.__e,l));return l}function w(n,l){return l=l||[],null==n||\"boolean\"==typeof n||(Array.isArray(n)?n.some(function(n){w(n,l)}):l.push(n)),l}function x(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else{for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=2)if(f==t)break n;n.insertBefore(t,o),r=o}return void 0!==r?r:t.nextSibling}function A(n,l,u,i,t){var o;for(o in u)\"children\"===o||\"key\"===o||o in l||C(n,o,null,u[o],i);for(o in l)t&&\"function\"!=typeof l[o]||\"children\"===o||\"key\"===o||\"value\"===o||\"checked\"===o||u[o]===l[o]||C(n,o,l[o],u[o],i)}function P(n,l,u){\"-\"===l[0]?n.setProperty(l,u):n[l]=null==u?\"\":\"number\"!=typeof u||e.test(l)?u:u+\"px\"}function C(n,l,u,i,t){var o;n:if(\"style\"===l)if(\"string\"==typeof u)n.style.cssText=u;else{if(\"string\"==typeof i&&(n.style.cssText=i=\"\"),i)for(l in i)u&&l in u||P(n.style,l,\"\");if(u)for(l in u)i&&u[l]===i[l]||P(n.style,l,u[l])}else if(\"o\"===l[0]&&\"n\"===l[1])o=l!==(l=l.replace(/Capture$/,\"\")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?H:$,o):n.removeEventListener(l,o?H:$,o);else if(\"dangerouslySetInnerHTML\"!==l){if(t)l=l.replace(/xlink[H:h]/,\"h\").replace(/sName$/,\"s\");else if(\"href\"!==l&&\"list\"!==l&&\"form\"!==l&&\"tabIndex\"!==l&&\"download\"!==l&&l in n)try{n[l]=null==u?\"\":u;break n}catch(n){}\"function\"==typeof u||(null!=u&&(!1!==u||\"a\"===l[0]&&\"r\"===l[1])?n.setAttribute(l,u):n.removeAttribute(l))}}function $(l){this.l[l.type+!1](n.event?n.event(l):l)}function H(l){this.l[l.type+!0](n.event?n.event(l):l)}function I(l,u,i,t,o,r,f,e,s){var a,v,h,d,_,k,b,g,w,x,A,P=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(s=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(a=n.__b)&&a(u);try{n:if(\"function\"==typeof P){if(g=u.props,w=(a=P.contextType)&&t[a.__c],x=a?w?w.props.value:a.__:t,i.__c?b=(v=u.__c=i.__c).__=v.__E:(\"prototype\"in P&&P.prototype.render?u.__c=v=new P(g,x):(u.__c=v=new p(g,x),v.constructor=P,v.render=M),w&&w.sub(v),v.props=g,v.state||(v.state={}),v.context=x,v.__n=t,h=v.__d=!0,v.__h=[]),null==v.__s&&(v.__s=v.state),null!=P.getDerivedStateFromProps&&(v.__s==v.state&&(v.__s=c({},v.__s)),c(v.__s,P.getDerivedStateFromProps(g,v.__s))),d=v.props,_=v.state,h)null==P.getDerivedStateFromProps&&null!=v.componentWillMount&&v.componentWillMount(),null!=v.componentDidMount&&v.__h.push(v.componentDidMount);else{if(null==P.getDerivedStateFromProps&&g!==d&&null!=v.componentWillReceiveProps&&v.componentWillReceiveProps(g,x),!v.__e&&null!=v.shouldComponentUpdate&&!1===v.shouldComponentUpdate(g,v.__s,x)||u.__v===i.__v){v.props=g,v.state=v.__s,u.__v!==i.__v&&(v.__d=!1),v.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u)}),v.__h.length&&f.push(v);break n}null!=v.componentWillUpdate&&v.componentWillUpdate(g,v.__s,x),null!=v.componentDidUpdate&&v.__h.push(function(){v.componentDidUpdate(d,_,k)})}v.context=x,v.props=g,v.state=v.__s,(a=n.__r)&&a(u),v.__d=!1,v.__v=u,v.__P=l,a=v.render(v.props,v.state,v.context),v.state=v.__s,null!=v.getChildContext&&(t=c(c({},t),v.getChildContext())),h||null==v.getSnapshotBeforeUpdate||(k=v.getSnapshotBeforeUpdate(d,_)),A=null!=a&&a.type===y&&null==a.key?a.props.children:a,m(l,Array.isArray(A)?A:[A],u,i,t,o,r,f,e,s),v.base=u.__e,u.__h=null,v.__h.length&&f.push(v),b&&(v.__E=v.__=null),v.__e=!1}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=j(i.__e,u,i,t,o,r,f,s);(a=n.diffed)&&a(u)}catch(l){u.__v=null,(s||null!=r)&&(u.__e=e,u.__h=!!s,r[r.indexOf(e)]=null),n.__e(l,u,i)}}function T(l,u){n.__c&&n.__c(u,l),l.some(function(u){try{l=u.__h,u.__h=[],l.some(function(n){n.call(u)})}catch(l){n.__e(l,u.__v)}})}function j(n,l,u,i,t,o,e,c){var a,v,h,y,p=u.props,d=l.props,_=l.type,k=0;if(\"svg\"===_&&(t=!0),null!=o)for(;k<o.length;k++)if((a=o[k])&&(a===n||(_?a.localName==_:3==a.nodeType))){n=a,o[k]=null;break}if(null==n){if(null===_)return document.createTextNode(d);n=t?document.createElementNS(\"http://www.w3.org/2000/svg\",_):document.createElement(_,d.is&&d),o=null,c=!1}if(null===_)p===d||c&&n.data===d||(n.data=d);else{if(o=o&&f.slice.call(n.childNodes),v=(p=u.props||r).dangerouslySetInnerHTML,h=d.dangerouslySetInnerHTML,!c){if(null!=o)for(p={},y=0;y<n.attributes.length;y++)p[n.attributes[y].name]=n.attributes[y].value;(h||v)&&(h&&(v&&h.__html==v.__html||h.__html===n.innerHTML)||(n.innerHTML=h&&h.__html||\"\"))}if(A(n,d,p,t,c),h)l.__k=[];else if(k=l.props.children,m(n,Array.isArray(k)?k:[k],l,u,i,t&&\"foreignObject\"!==_,o,e,n.firstChild,c),null!=o)for(k=o.length;k--;)null!=o[k]&&s(o[k]);c||(\"value\"in d&&void 0!==(k=d.value)&&(k!==n.value||\"progress\"===_&&!k)&&C(n,\"value\",k,p.value,!1),\"checked\"in d&&void 0!==(k=d.checked)&&k!==n.checked&&C(n,\"checked\",k,p.checked,!1))}return n}function z(l,u,i){try{\"function\"==typeof l?l(u):l.current=u}catch(l){n.__e(l,i)}}function L(l,u,i){var t,o,r;if(n.unmount&&n.unmount(l),(t=l.ref)&&(t.current&&t.current!==l.__e||z(t,null,u)),i||\"function\"==typeof l.type||(i=null!=(o=l.__e)),l.__e=l.__d=void 0,null!=(t=l.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount()}catch(l){n.__e(l,u)}t.base=t.__P=null}if(t=l.__k)for(r=0;r<t.length;r++)t[r]&&L(t[r],u,i);null!=o&&s(o)}function M(n,l,u){return this.constructor(n,u)}function N(l,u,i){var t,o,e;n.__&&n.__(l,u),o=(t=\"function\"==typeof i)?null:i&&i.__k||u.__k,e=[],I(u,l=(!t&&i||u).__k=a(y,null,[l]),o||r,r,void 0!==u.ownerSVGElement,!t&&i?[i]:o?null:u.firstChild?f.slice.call(u.childNodes):null,e,!t&&i?i:o?o.__e:u.firstChild,t),T(e,l)}function O(n,l){N(n,l,O)}function S(n,l,u){var i,t,o,r=arguments,f=c({},n.props);for(o in l)\"key\"==o?i=l[o]:\"ref\"==o?t=l[o]:f[o]=l[o];if(arguments.length>3)for(u=[u],o=3;o<arguments.length;o++)u.push(r[o]);return null!=u&&(f.children=u),v(n.type,f,i||n.key,t||n.ref,null)}function q(n,l){var u={__c:l=\"__cC\"+o++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(k)},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n)}}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n={__e:function(n,l){for(var u,i,t;l=l.__;)if((u=l.__c)&&!u.__)try{if((i=u.constructor)&&null!=i.getDerivedStateFromError&&(u.setState(i.getDerivedStateFromError(n)),t=u.__d),null!=u.componentDidCatch&&(u.componentDidCatch(n),t=u.__d),t)return u.__E=u}catch(l){n=l}throw n},__v:0},l=function(n){return null!=n&&void 0===n.constructor},p.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=c({},this.state),\"function\"==typeof n&&(n=n(c({},u),this.props)),n&&c(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),k(this))},p.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),k(this))},p.prototype.render=y,u=[],i=\"function\"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,b.__r=0,o=0;export{N as render,O as hydrate,a as createElement,a as h,y as Fragment,h as createRef,l as isValidElement,p as Component,S as cloneElement,q as createContext,w as toChildArray,n as options};\n//# sourceMappingURL=preact.module.js.map\n", "export type ID = string;\n\nexport function generateUUID(): ID {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n", "import { generateUUID, ID } from './util/id';\n\nclass Base {\n  private readonly _id: ID;\n\n  constructor(id?: ID) {\n    this._id = id || generateUUID();\n  }\n\n  get id(): ID {\n    return this._id;\n  }\n}\n\nexport default Base;\n", "export default {\n  search: {\n    placeholder: 'Type a keyword...',\n  },\n  sort: {\n    sortAsc: 'Sort column ascending',\n    sortDesc: 'Sort column descending',\n  },\n  pagination: {\n    previous: 'Previous',\n    next: 'Next',\n    navigate: (page, pages) => `Page ${page} of ${pages}`,\n    page: (page) => `Page ${page}`,\n    showing: 'Showing',\n    of: 'of',\n    to: 'to',\n    results: 'results',\n  },\n  loading: 'Loading...',\n  noRecordsFound: 'No matching records found',\n  error: 'An error happened while fetching the data',\n};\n", "import enUS from './en_US';\ntype MessageFormat = (...args) => string;\ntype Message = string | MessageFormat;\nexport type Language = { [key: string]: Message | Language };\n\nexport class Translator {\n  private readonly _language: Language;\n  private readonly _defaultLanguage: Language;\n\n  constructor(language?: Language) {\n    this._language = language;\n    this._defaultLanguage = enUS;\n  }\n\n  /**\n   * Tries to split the message with \".\" and find\n   * the key in the given language\n   *\n   * @param message\n   * @param lang\n   */\n  getString(message: string, lang: Language): MessageFormat {\n    if (!lang || !message) return null;\n\n    const splitted = message.split('.');\n    const key = splitted[0];\n\n    if (lang[key]) {\n      const val = lang[key];\n\n      if (typeof val === 'string') {\n        return (): string => val;\n      } else if (typeof val === 'function') {\n        return val;\n      } else {\n        return this.getString(splitted.slice(1).join('.'), val);\n      }\n    }\n\n    return null;\n  }\n\n  translate(message: string, ...args): string {\n    const translated = this.getString(message, this._language);\n    let messageFormat;\n\n    if (translated) {\n      messageFormat = translated;\n    } else {\n      messageFormat = this.getString(message, this._defaultLanguage);\n    }\n\n    if (messageFormat) {\n      return messageFormat(...args);\n    }\n\n    return message;\n  }\n}\n\nexport function useTranslator(translator: Translator) {\n  return function (message: string, ...args): string {\n    return translator.translate(message, ...args);\n  };\n}\n", "import { Component } from 'preact';\nimport { Config } from '../config';\nimport getConfig from '../util/getConfig';\nimport { useTranslator } from '../i18n/language';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BaseProps {}\n\nexport abstract class BaseComponent<\n  P extends BaseProps = unknown,\n  S = unknown,\n> extends Component<P, S> {\n  protected config: Config;\n  protected _: (message: string, ...args) => string;\n\n  constructor(props: P, context: any) {\n    super(props, context);\n    this.config = getConfig(context);\n\n    if (this.config) {\n      this._ = useTranslator(this.config.translator);\n    }\n  }\n}\n\nexport interface BaseComponent<P> {\n  new (props: P, context?: any): Component<P>;\n}\n", "import { Context } from 'preact';\nimport { Config } from '../config';\n\n/**\n * This is a hack to get the current global config from Preact context.\n * My assumption is that we only need one global context which is the ConfigContext\n *\n * @param context\n */\nexport default function getConfig(context: {\n  [key: string]: Context<any>;\n}): Config {\n  if (!context) return null;\n\n  const keys = Object.keys(context);\n\n  if (keys.length) {\n    // TODO: can we use a better way to capture and return the Config context?\n    const ctx: any = context[keys[0]];\n    return ctx.props.value;\n  }\n\n  return null;\n}\n", "import { h } from 'preact';\n\nimport { BaseComponent, BaseProps } from './base';\n\nexport interface HTMLContentProps extends BaseProps {\n  content: string;\n  parentElement?: string;\n}\n\nexport class HTMLElement extends BaseComponent<HTMLContentProps> {\n  static defaultProps = {\n    parentElement: 'span',\n  };\n\n  render() {\n    return h(this.props.parentElement, {\n      dangerouslySetInnerHTML: { __html: this.props.content },\n    });\n  }\n}\n", "import { h, VNode } from 'preact';\nimport { HTMLElement } from '../view/htmlElement';\n\nexport function decode(content: string): string {\n  const value = new DOMParser().parseFromString(content, 'text/html');\n  return value.documentElement.textContent;\n}\n\nexport function html(content: string, parentElement?: string): VNode {\n  return h(HTMLElement, { content: content, parentElement: parentElement });\n}\n", "import Base from './base';\nimport { TCell } from './types';\nimport { html } from './util/html';\nimport { ComponentChild } from 'preact';\n\nclass Cell extends Base {\n  // because a Cell is a subset of TCell type\n  public data: number | string | boolean | ComponentChild;\n\n  constructor(data: TCell) {\n    super();\n\n    this.update(data);\n  }\n\n  private cast(data: TCell): number | string | boolean | ComponentChild {\n    if (data instanceof HTMLElement) {\n      return html(data.outerHTML);\n    }\n\n    return data;\n  }\n\n  /**\n   * Updates the Cell's data\n   *\n   * @param data\n   */\n  public update(data: TCell): Cell {\n    this.data = this.cast(data);\n    return this;\n  }\n}\n\nexport default Cell;\n", "// The order of enum items define the processing order of the processor type\n// e.g. Extractor = 0 will be processed before Transformer = 1\nimport { generateUUID, ID } from '../util/id';\nimport { EventEmitter } from '../util/eventEmitter';\n\nexport enum ProcessorType {\n  Initiator,\n  ServerFilter,\n  ServerSort,\n  ServerLimit,\n  Extractor,\n  Transformer,\n  Filter,\n  Sort,\n  Limit,\n}\n\ninterface PipelineProcessorEvents<T, P> {\n  propsUpdated: (processor: PipelineProcessor<T, P>) => void;\n  beforeProcess: (...args) => void;\n  afterProcess: (...args) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PipelineProcessorProps {}\n\nexport abstract class PipelineProcessor<\n  T,\n  P extends Partial<PipelineProcessorProps>,\n> extends EventEmitter<PipelineProcessorEvents<T, P>> {\n  public readonly id: ID;\n  private readonly _props: P;\n\n  abstract get type(): ProcessorType;\n  protected abstract _process(...args): T | Promise<T>;\n  protected validateProps?(...args): void;\n\n  constructor(props?: Partial<P>) {\n    super();\n\n    this._props = {} as P;\n    this.id = generateUUID();\n\n    if (props) this.setProps(props);\n  }\n\n  /**\n   * process is used to call beforeProcess and afterProcess callbacks\n   * This function is just a wrapper that calls _process()\n   *\n   * @param args\n   */\n  process(...args): T | Promise<T> {\n    if (this.validateProps instanceof Function) {\n      this.validateProps(...args);\n    }\n\n    this.emit('beforeProcess', ...args);\n    const result = this._process(...args);\n    this.emit('afterProcess', ...args);\n    return result;\n  }\n\n  setProps(props: Partial<P>): this {\n    Object.assign(this._props, props);\n    this.emit('propsUpdated', this);\n    return this;\n  }\n\n  get props(): P {\n    return this._props;\n  }\n}\n", "import Cell from './cell';\nimport Base from './base';\nimport { TCell } from './types';\n\nclass Row extends Base {\n  private _cells: Cell[];\n\n  constructor(cells?: Cell[]) {\n    super();\n\n    this.cells = cells || [];\n  }\n\n  public cell(index: number): Cell {\n    return this._cells[index];\n  }\n\n  public get cells(): Cell[] {\n    return this._cells;\n  }\n\n  public set cells(cells: Cell[]) {\n    this._cells = cells;\n  }\n\n  public toArray(): TCell[] {\n    return this.cells.map((cell) => cell.data);\n  }\n\n  /**\n   * Creates a new Row from an array of Cell(s)\n   * This method generates a new ID for the Row and all nested elements\n   *\n   * @param cells\n   * @returns Row\n   */\n  static fromCells(cells: Cell[]): Row {\n    return new Row(cells.map((cell) => new Cell(cell.data)));\n  }\n\n  get length(): number {\n    return this.cells.length;\n  }\n}\n\nexport default Row;\n", "import Base from './base';\nimport Row from './row';\nimport Cell from './cell';\nimport { OneDArray, TCell, TwoDArray } from './types';\nimport { oneDtoTwoD } from './util/array';\n\nclass Tabular extends Base {\n  private _rows: Row[];\n  private _length: number;\n\n  constructor(rows?: Row[] | Row) {\n    super();\n\n    if (rows instanceof Array) {\n      this.rows = rows;\n    } else if (rows instanceof Row) {\n      this.rows = [rows];\n    } else {\n      this.rows = [];\n    }\n  }\n\n  get rows(): Row[] {\n    return this._rows;\n  }\n\n  set rows(rows: Row[]) {\n    this._rows = rows;\n  }\n\n  get length(): number {\n    return this._length || this.rows.length;\n  }\n\n  // we want to sent the length when storage is ServerStorage\n  set length(len: number) {\n    this._length = len;\n  }\n\n  public toArray(): TCell[][] {\n    return this.rows.map((row) => row.toArray());\n  }\n\n  /**\n   * Creates a new Tabular from an array of Row(s)\n   * This method generates a new ID for the Tabular and all nested elements\n   *\n   * @param rows\n   * @returns Tabular\n   */\n  static fromRows(rows: Row[]): Tabular {\n    return new Tabular(rows.map((row) => Row.fromCells(row.cells)));\n  }\n\n  /**\n   * Creates a new Tabular from a 2D array\n   * This method generates a new ID for the Tabular and all nested elements\n   *\n   * @param data\n   * @returns Tabular\n   */\n  static fromArray<T extends TCell>(\n    data: OneDArray<T> | TwoDArray<T>,\n  ): Tabular {\n    data = oneDtoTwoD(data);\n\n    return new Tabular(\n      data.map((row) => new Row(row.map((cell) => new Cell(cell)))),\n    );\n  }\n}\n\nexport default Tabular;\n", "import { OneDArray, TwoDArray } from '../types';\n\nexport function oneDtoTwoD<T>(data: OneDArray<T> | TwoDArray<T>): TwoDArray<T> {\n  if (data[0] && !(data[0] instanceof Array)) {\n    return [data] as TwoDArray<T>;\n  }\n\n  return data as TwoDArray<T>;\n}\n\nexport function flatten<T>(arrays: TwoDArray<T>): OneDArray<T> {\n  return arrays.reduce((prev, x) => prev.concat(x), []);\n}\n", "type EventArgs<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\n/**\n * Example:\n *\n * export interface BaseEvents<P, S> {\n *   SET_STATE: (component: BaseComponent<P, S>, state: S) => void;\n * }\n */\n\nexport interface EventEmitter<EventTypes> {\n  addListener<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes>;\n\n  on<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes>;\n\n  off<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes>;\n\n  emit<EventName extends keyof EventTypes>(\n    event: EventName,\n    ...args: EventArgs<EventTypes[EventName]>\n  ): boolean;\n}\n\nexport class EventEmitter<EventTypes> {\n  private callbacks: { [event: string]: ((...args) => void)[] };\n\n  // because we are using EventEmitter as a mixin and the\n  // constructor won't be called by the applyMixins function\n  // see src/base.ts and src/util/applyMixin.ts\n  private init(event?: string): void {\n    if (!this.callbacks) {\n      this.callbacks = {};\n    }\n\n    if (event && !this.callbacks[event]) {\n      this.callbacks[event] = [];\n    }\n  }\n\n  on<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes> {\n    this.init(event as string);\n    this.callbacks[event as string].push(listener);\n    return this;\n  }\n\n  off<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes> {\n    const eventName = event as string;\n\n    this.init();\n\n    if (!this.callbacks[eventName] || this.callbacks[eventName].length === 0) {\n      // there is no callbacks with this key\n      return this;\n    }\n\n    this.callbacks[eventName] = this.callbacks[eventName].filter(\n      (value) => value != listener,\n    );\n\n    return this;\n  }\n\n  emit<EventName extends keyof EventTypes>(\n    event: EventName,\n    ...args: EventArgs<EventTypes[EventName]>\n  ): boolean {\n    const eventName = event as string;\n\n    this.init(eventName);\n\n    if (this.callbacks[eventName].length > 0) {\n      this.callbacks[eventName].forEach((value) => value(...args));\n      return true;\n    }\n\n    return false;\n  }\n}\n", "import search from '../../operator/search';\nimport Tabular from '../../tabular';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { OneDArray, TCell, TColumn } from '../../types';\n\ninterface GlobalSearchFilterProps extends PipelineProcessorProps {\n  keyword: string;\n  columns: OneDArray<TColumn>;\n  ignoreHiddenColumns: boolean;\n  selector?: (cell: TCell, rowIndex: number, cellIndex: number) => string;\n}\n\nclass GlobalSearchFilter extends PipelineProcessor<\n  Tabular,\n  GlobalSearchFilterProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Filter;\n  }\n\n  _process(data: Tabular): Tabular {\n    if (this.props.keyword) {\n      return search(\n        String(this.props.keyword).trim(),\n        this.props.columns,\n        this.props.ignoreHiddenColumns,\n        data,\n        this.props.selector,\n      );\n    }\n\n    return data;\n  }\n}\n\nexport default GlobalSearchFilter;\n", "import Tabular from '../tabular';\nimport { VNode } from 'preact';\nimport { HTMLContentProps } from '../view/htmlElement';\nimport { OneDArray, TCell, TColumn } from '../types';\n\nexport default function (\n  keyword: string,\n  columns: OneDArray<TColumn>,\n  ignoreHiddenColumns: boolean,\n  tabular: Tabular,\n  selector?: (cell: TCell, rowIndex: number, cellIndex: number) => string,\n): Tabular {\n  // escape special regex chars\n  keyword = keyword.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n\n  return new Tabular(\n    tabular.rows.filter((row, rowIndex) =>\n      row.cells.some((cell, cellIndex) => {\n        if (!cell) {\n          return false;\n        }\n\n        if (ignoreHiddenColumns) {\n          if (\n            columns &&\n            columns[cellIndex] &&\n            typeof columns[cellIndex] === 'object'\n          ) {\n            const typedColumn = columns[cellIndex] as TColumn;\n            if (typedColumn.hidden) {\n              return false;\n            }\n          }\n        }\n\n        let data = '';\n\n        if (typeof selector === 'function') {\n          data = selector(cell.data, rowIndex, cellIndex);\n        } else if (typeof cell.data === 'object') {\n          // HTMLContent element\n          const element = cell.data as VNode<HTMLContentProps>;\n          if (element && element.props && element.props.content) {\n            // TODO: we should only search in the content of the element. props.content is the entire HTML element\n            data = element.props.content;\n          }\n        } else {\n          // primitive types\n          data = String(cell.data);\n        }\n\n        return new RegExp(keyword, 'gi').test(data);\n      }),\n    ),\n  );\n}\n", "export function className(...args: string[]): string {\n  const prefix = 'gridjs';\n\n  return `${prefix}${args.reduce(\n    (prev: string, cur: string) => `${prev}-${cur}`,\n    '',\n  )}`;\n}\n\nexport function classJoin(...classNames: string[]): string {\n  return (\n    classNames\n      .filter((x) => x)\n      .reduce((className, prev) => `${className || ''} ${prev}`, '')\n      .trim() || null\n  );\n}\n", "import { EventEmitter } from '../../util/eventEmitter';\nimport Dispatcher from '../../util/dispatcher';\n\ninterface BaseStoreEvents<STATE> {\n  updated: (newState: STATE, prevState?: STATE) => void;\n}\n\nexport default abstract class BaseStore<STATE, ACTIONS> extends EventEmitter<\n  BaseStoreEvents<STATE>\n> {\n  private _state: STATE;\n  protected readonly dispatcher: Dispatcher<any>;\n\n  constructor(dispatcher: Dispatcher<any>) {\n    super();\n    this.dispatcher = dispatcher;\n    this._state = this.getInitialState();\n    dispatcher.register(this._handle.bind(this));\n  }\n\n  abstract handle<K extends keyof ACTIONS>(type: K, payload: ACTIONS[K]): void;\n  abstract getInitialState(): STATE;\n\n  private _handle(action): void {\n    this.handle(action.type, action.payload);\n  }\n\n  setState(newState: STATE): void {\n    const prevState = this._state;\n    this._state = newState;\n    this.emit('updated', newState, prevState);\n  }\n\n  get state(): STATE {\n    return this._state;\n  }\n}\n", "import { BaseComponent, BaseProps } from './view/base';\nimport { Component, ComponentProps, Fragment, h } from 'preact';\nimport log from './util/log';\n\n/**\n * BaseProps for all plugins\n */\nexport interface PluginBaseProps<T extends PluginBaseComponentCtor> {\n  plugin: Plugin<T>;\n}\n\n/**\n * BaseComponent for all plugins\n */\nexport abstract class PluginBaseComponent<\n  P extends PluginBaseProps<any> = any,\n  S = unknown,\n> extends BaseComponent<P, S> {}\n\nexport interface PluginBaseComponentCtor<\n  P extends PluginBaseProps<any> = any,\n  S = unknown,\n> {\n  new (props: P, context?: any): Component<P, S>;\n}\n\nexport enum PluginPosition {\n  Header,\n  Footer,\n  Cell,\n}\n\nexport interface Plugin<T extends PluginBaseComponentCtor> {\n  id: string;\n  position: PluginPosition;\n  component: T;\n  props?: Partial<ComponentProps<T>>;\n  order?: number;\n}\n\nexport class PluginManager {\n  private readonly plugins: Plugin<any>[];\n\n  constructor() {\n    this.plugins = [];\n  }\n\n  get<T extends PluginBaseComponentCtor>(id: string): Plugin<T> | null {\n    const plugins = this.plugins.filter((p) => p.id === id);\n\n    if (plugins.length > 0) {\n      return plugins[0];\n    }\n\n    return null;\n  }\n\n  add<T extends PluginBaseComponentCtor>(plugin: Plugin<T>): this {\n    if (!plugin.id) {\n      log.error('Plugin ID cannot be empty');\n      return this;\n    }\n\n    if (this.get(plugin.id) !== null) {\n      log.error(`Duplicate plugin ID: ${plugin.id}`);\n      return this;\n    }\n\n    this.plugins.push(plugin);\n    return this;\n  }\n\n  remove(id: string): this {\n    this.plugins.splice(this.plugins.indexOf(this.get(id)), 1);\n    return this;\n  }\n\n  list<T extends PluginBaseComponentCtor>(\n    position?: PluginPosition,\n  ): Plugin<T>[] {\n    let plugins: Plugin<T>[];\n\n    if (position != null || position != undefined) {\n      plugins = this.plugins.filter((p) => p.position === position);\n    } else {\n      plugins = this.plugins;\n    }\n\n    return plugins.sort((a, b) => a.order - b.order);\n  }\n}\n\nexport interface PluginRendererProps extends BaseProps {\n  props?: any;\n  // to render a single plugin\n  pluginId?: string;\n  // to render all plugins in this PluginPosition\n  position?: PluginPosition;\n}\n\nexport class PluginRenderer extends BaseComponent<PluginRendererProps> {\n  render() {\n    if (this.props.pluginId) {\n      // render a single plugin\n      const plugin = this.config.plugin.get(this.props.pluginId);\n\n      if (!plugin) return null;\n\n      return h(\n        Fragment,\n        {},\n        h(plugin.component, {\n          plugin: plugin,\n          ...plugin.props,\n          ...this.props.props,\n        }),\n      );\n    } else if (this.props.position !== undefined) {\n      // render using a specific plugin position\n      return h(\n        Fragment,\n        {},\n        this.config.plugin\n          .list(this.props.position)\n          .map((p) =>\n            h(p.component, { plugin: p, ...p.props, ...this.props.props }),\n          ),\n      );\n    }\n\n    return null;\n  }\n}\n", "import BaseStore from '../../base/store';\nimport { SearchActionsType } from './actions';\n\nexport type SearchStoreState = { keyword: string | null };\n\nexport class SearchStore extends BaseStore<\n  SearchStoreState,\n  SearchActionsType\n> {\n  getInitialState(): SearchStoreState {\n    return { keyword: null };\n  }\n\n  handle(type, payload): void {\n    if (type === 'SEARCH_KEYWORD') {\n      const { keyword } = payload;\n      this.search(keyword);\n    }\n  }\n\n  private search(keyword: string): void {\n    this.setState({ keyword: keyword });\n  }\n}\n", "import Dispatcher from '../../util/dispatcher';\n\nexport abstract class BaseActions<ACTIONS> {\n  private readonly dispatcher: Dispatcher<any>;\n\n  constructor(dispatcher: Dispatcher<any>) {\n    this.dispatcher = dispatcher;\n  }\n\n  protected dispatch<K extends keyof ACTIONS>(\n    type: K,\n    payload: ACTIONS[K],\n  ): void {\n    this.dispatcher.dispatch({\n      type: type,\n      payload: payload,\n    });\n  }\n}\n", "import { BaseActions } from '../../base/actions';\n\nexport interface SearchActionsType {\n  SEARCH_KEYWORD: {\n    keyword: string;\n  };\n}\n\nexport class SearchActions extends BaseActions<SearchActionsType> {\n  search(keyword: string): void {\n    this.dispatch('SEARCH_KEYWORD', {\n      keyword: keyword,\n    });\n  }\n}\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\n\ninterface ServerGlobalSearchFilterProps extends PipelineProcessorProps {\n  keyword?: string;\n  url?: (prevUrl: string, keyword: string) => string;\n  body?: (prevBody: BodyInit, keyword: string) => BodyInit;\n}\n\nclass ServerGlobalSearchFilter extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerGlobalSearchFilterProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.ServerFilter;\n  }\n\n  _process(options?: ServerStorageOptions): ServerStorageOptions {\n    if (!this.props.keyword) return options;\n\n    const updates = {};\n\n    if (this.props.url) {\n      updates['url'] = this.props.url(options.url, this.props.keyword);\n    }\n\n    if (this.props.body) {\n      updates['body'] = this.props.body(options.body, this.props.keyword);\n    }\n\n    return {\n      ...options,\n      ...updates,\n    };\n  }\n}\n\nexport default ServerGlobalSearchFilter;\n", "/**\n * Centralized logging lib\n *\n * This class needs some improvements but so far it has been used to have a coherent way to log\n */\nclass Logger {\n  private format(message: string, type: string): string {\n    return `[Grid.js] [${type.toUpperCase()}]: ${message}`;\n  }\n\n  error(message: string, throwException = false): void {\n    const msg = this.format(message, 'error');\n\n    if (throwException) {\n      throw Error(msg);\n    } else {\n      console.error(msg);\n    }\n  }\n\n  warn(message: string): void {\n    console.warn(this.format(message, 'warn'));\n  }\n\n  info(message: string): void {\n    console.info(this.format(message, 'info'));\n  }\n}\n\nexport default new Logger();\n", "import { h } from 'preact';\nimport GlobalSearchFilter from '../../../pipeline/filter/globalSearch';\nimport { classJoin, className } from '../../../util/className';\nimport { SearchStore, SearchStoreState } from './store';\nimport { SearchActions } from './actions';\nimport ServerGlobalSearchFilter from '../../../pipeline/filter/serverGlobalSearch';\nimport { debounce } from '../../../util/debounce';\nimport { TCell } from '../../../types';\nimport { PluginBaseComponent, PluginBaseProps } from '../../../plugin';\n\nexport interface SearchConfig {\n  keyword?: string;\n  enabled?: boolean;\n  ignoreHiddenColumns?: boolean;\n  debounceTimeout?: number;\n  selector?: (cell: TCell, rowIndex: number, cellIndex: number) => string;\n  server?: {\n    url?: (prevUrl: string, keyword: string) => string;\n    body?: (prevBody: BodyInit, keyword: string) => BodyInit;\n  };\n}\n\nexport class Search extends PluginBaseComponent<\n  SearchConfig & PluginBaseProps<Search>\n> {\n  private readonly searchProcessor:\n    | GlobalSearchFilter\n    | ServerGlobalSearchFilter;\n  private readonly actions: SearchActions;\n  private readonly store: SearchStore;\n  private readonly storeUpdatedFn: (...args) => void;\n\n  static defaultProps = {\n    debounceTimeout: 250,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.actions = new SearchActions(this.config.dispatcher);\n    this.store = new SearchStore(this.config.dispatcher);\n    const { enabled, keyword } = props;\n\n    if (enabled) {\n      // initial search\n      if (keyword) this.actions.search(keyword);\n\n      this.storeUpdatedFn = this.storeUpdated.bind(this);\n      this.store.on('updated', this.storeUpdatedFn);\n\n      let searchProcessor;\n      if (props.server) {\n        searchProcessor = new ServerGlobalSearchFilter({\n          keyword: props.keyword,\n          url: props.server.url,\n          body: props.server.body,\n        });\n      } else {\n        searchProcessor = new GlobalSearchFilter({\n          keyword: props.keyword,\n          columns: this.config.header && this.config.header.columns,\n          ignoreHiddenColumns:\n            props.ignoreHiddenColumns ||\n            props.ignoreHiddenColumns === undefined,\n          selector: props.selector,\n        });\n      }\n\n      this.searchProcessor = searchProcessor;\n\n      // adds a new processor to the pipeline\n      this.config.pipeline.register(searchProcessor);\n    }\n  }\n\n  componentWillUnmount(): void {\n    this.config.pipeline.unregister(this.searchProcessor);\n    this.store.off('updated', this.storeUpdatedFn);\n  }\n\n  private storeUpdated(state: SearchStoreState): void {\n    // updates the processor state\n    this.searchProcessor.setProps({\n      keyword: state.keyword,\n    });\n  }\n\n  private onChange(event): void {\n    const keyword = event.target.value;\n    this.actions.search(keyword);\n  }\n\n  render() {\n    if (!this.props.enabled) return null;\n\n    let onInput = this.onChange.bind(this);\n\n    // add debounce to input only if it's a server-side search\n    if (this.searchProcessor instanceof ServerGlobalSearchFilter) {\n      onInput = debounce(onInput, this.props.debounceTimeout);\n    }\n\n    return (\n      <div\n        className={className(classJoin('search', this.config.className.search))}\n      >\n        <input\n          type=\"search\"\n          placeholder={this._('search.placeholder')}\n          aria-label={this._('search.placeholder')}\n          onInput={onInput}\n          className={classJoin(\n            className('input'),\n            className('search', 'input'),\n          )}\n          value={this.store.state.keyword}\n        />\n      </div>\n    );\n  }\n}\n", "export const debounce = <F extends (...args: any[]) => any>(\n  func: F,\n  waitFor: number,\n) => {\n  let timeout;\n\n  return (...args: Parameters<F>): Promise<ReturnType<F>> =>\n    new Promise((resolve) => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n\n      timeout = setTimeout(() => resolve(func(...args)), waitFor);\n    });\n};\n", "import Tabular from '../../tabular';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\n\ninterface PaginationLimitProps extends PipelineProcessorProps {\n  page: number;\n  limit: number;\n}\n\nclass PaginationLimit extends PipelineProcessor<Tabular, PaginationLimitProps> {\n  protected validateProps(): void {\n    if (isNaN(Number(this.props.limit)) || isNaN(Number(this.props.page))) {\n      throw Error('Invalid parameters passed');\n    }\n  }\n\n  get type(): ProcessorType {\n    return ProcessorType.Limit;\n  }\n\n  protected _process(data: Tabular): Tabular {\n    const page = this.props.page;\n    const start = page * this.props.limit;\n    const end = (page + 1) * this.props.limit;\n\n    return new Tabular(data.rows.slice(start, end));\n  }\n}\n\nexport default PaginationLimit;\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\n\ninterface ServerPaginationLimitProps extends PipelineProcessorProps {\n  page: number;\n  limit: number;\n  url?: (prevUrl: string, page: number, limit: number) => string;\n  body?: (prevBody: BodyInit, page: number, limit: number) => BodyInit;\n}\n\nclass ServerPaginationLimit extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerPaginationLimitProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.ServerLimit;\n  }\n\n  _process(options?: ServerStorageOptions): ServerStorageOptions {\n    const updates = {};\n\n    if (this.props.url) {\n      updates['url'] = this.props.url(\n        options.url,\n        this.props.page,\n        this.props.limit,\n      );\n    }\n\n    if (this.props.body) {\n      updates['body'] = this.props.body(\n        options.body,\n        this.props.page,\n        this.props.limit,\n      );\n    }\n\n    return {\n      ...options,\n      ...updates,\n    };\n  }\n}\n\nexport default ServerPaginationLimit;\n", "import { h, Fragment } from 'preact';\nimport PaginationLimit from '../../pipeline/limit/pagination';\nimport { classJoin, className } from '../../util/className';\nimport ServerPaginationLimit from '../../pipeline/limit/serverPagination';\nimport Tabular from '../../tabular';\nimport { PipelineProcessor } from '../../pipeline/processor';\nimport { PluginBaseComponent, PluginBaseProps } from '../../plugin';\n\ninterface PaginationState {\n  page: number;\n  limit?: number;\n  total: number;\n}\n\nexport interface PaginationConfig {\n  enabled: boolean;\n  limit?: number;\n  page?: number;\n  summary?: boolean;\n  nextButton?: boolean;\n  prevButton?: boolean;\n  buttonsCount?: number;\n  resetPageOnUpdate?: boolean;\n  server?: {\n    url?: (prevUrl: string, page: number, limit: number) => string;\n    body?: (prevBody: BodyInit, page: number, limit: number) => BodyInit;\n  };\n}\n\nexport class Pagination extends PluginBaseComponent<\n  PluginBaseProps<Pagination> & PaginationConfig,\n  PaginationState\n> {\n  private processor: PaginationLimit | ServerPaginationLimit;\n  private onUpdateFn: (processor: PipelineProcessor<any, any>) => void;\n  private setTotalFromTabularFn: (tabular: Tabular) => void;\n\n  static defaultProps = {\n    summary: true,\n    nextButton: true,\n    prevButton: true,\n    buttonsCount: 3,\n    limit: 10,\n    resetPageOnUpdate: true,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      limit: props.limit,\n      page: props.page || 0,\n      total: 0,\n    };\n  }\n\n  componentWillMount(): void {\n    if (this.props.enabled) {\n      let processor;\n\n      this.setTotalFromTabularFn = this.setTotalFromTabular.bind(this);\n\n      if (this.props.server) {\n        processor = new ServerPaginationLimit({\n          limit: this.state.limit,\n          page: this.state.page,\n          url: this.props.server.url,\n          body: this.props.server.body,\n        });\n\n        this.config.pipeline.on('afterProcess', this.setTotalFromTabularFn);\n      } else {\n        processor = new PaginationLimit({\n          limit: this.state.limit,\n          page: this.state.page,\n        });\n\n        // Pagination (all Limit processors) is the last step in the pipeline\n        // and we assume that at this stage, we have the rows that we care about.\n        // Let's grab the rows before processing Pagination and set total number of rows\n        processor.on('beforeProcess', this.setTotalFromTabularFn);\n      }\n\n      this.processor = processor;\n      this.config.pipeline.register(processor);\n\n      // we need to make sure that the state is set\n      // to the default props when an error happens\n      this.config.pipeline.on('error', () => {\n        this.setState({\n          total: 0,\n          page: 0,\n        });\n      });\n    }\n  }\n\n  private setTotalFromTabular(tabular: Tabular): void {\n    this.setTotal(tabular.length);\n  }\n\n  private onUpdate(processor): void {\n    // this is to ensure that the current page is set to 0\n    // when a processor is updated for some reason\n    if (this.props.resetPageOnUpdate && processor !== this.processor) {\n      this.setPage(0);\n    }\n  }\n\n  componentDidMount(): void {\n    this.onUpdateFn = this.onUpdate.bind(this);\n    this.config.pipeline.on('updated', this.onUpdateFn);\n  }\n\n  componentWillUnmount() {\n    this.config.pipeline.unregister(this.processor);\n    this.config.pipeline.off('updated', this.onUpdateFn);\n  }\n\n  private get pages(): number {\n    return Math.ceil(this.state.total / this.state.limit);\n  }\n\n  private setPage(page: number): void {\n    if (page >= this.pages || page < 0 || page === this.state.page) {\n      return null;\n    }\n\n    this.setState({\n      page: page,\n    });\n\n    this.processor.setProps({\n      page: page,\n    });\n  }\n\n  private setTotal(totalRows: number): void {\n    // to set the correct total number of rows\n    // when running in-memory operations\n    this.setState({\n      total: totalRows,\n    });\n  }\n\n  renderPages() {\n    if (this.props.buttonsCount <= 0) {\n      return null;\n    }\n\n    // how many pagination buttons to render?\n    const maxCount: number = Math.min(this.pages, this.props.buttonsCount);\n\n    let pagePivot = Math.min(this.state.page, Math.floor(maxCount / 2));\n    if (this.state.page + Math.floor(maxCount / 2) >= this.pages) {\n      pagePivot = maxCount - (this.pages - this.state.page);\n    }\n\n    return (\n      <Fragment>\n        {this.pages > maxCount && this.state.page - pagePivot > 0 && (\n          <Fragment>\n            <button\n              tabIndex={0}\n              role=\"button\"\n              onClick={this.setPage.bind(this, 0)}\n              title={this._('pagination.firstPage')}\n              aria-label={this._('pagination.firstPage')}\n              className={this.config.className.paginationButton}\n            >\n              {this._('1')}\n            </button>\n            <button\n              tabIndex={-1}\n              className={classJoin(\n                className('spread'),\n                this.config.className.paginationButton,\n              )}\n            >\n              ...\n            </button>\n          </Fragment>\n        )}\n\n        {Array.from(Array(maxCount).keys())\n          .map((i) => this.state.page + (i - pagePivot))\n          .map((i) => (\n            <button\n              tabIndex={0}\n              role=\"button\"\n              onClick={this.setPage.bind(this, i)}\n              className={classJoin(\n                this.state.page === i\n                  ? classJoin(\n                      className('currentPage'),\n                      this.config.className.paginationButtonCurrent,\n                    )\n                  : null,\n                this.config.className.paginationButton,\n              )}\n              title={this._('pagination.page', i + 1)}\n              aria-label={this._('pagination.page', i + 1)}\n            >\n              {this._(`${i + 1}`)}\n            </button>\n          ))}\n\n        {this.pages > maxCount && this.pages > this.state.page + pagePivot + 1 && (\n          <Fragment>\n            <button\n              tabIndex={-1}\n              className={classJoin(\n                className('spread'),\n                this.config.className.paginationButton,\n              )}\n            >\n              ...\n            </button>\n            <button\n              tabIndex={0}\n              role=\"button\"\n              onClick={this.setPage.bind(this, this.pages - 1)}\n              title={this._('pagination.page', this.pages)}\n              aria-label={this._('pagination.page', this.pages)}\n              className={this.config.className.paginationButton}\n            >\n              {this._(`${this.pages}`)}\n            </button>\n          </Fragment>\n        )}\n      </Fragment>\n    );\n  }\n\n  renderSummary() {\n    return (\n      <Fragment>\n        {this.props.summary && this.state.total > 0 && (\n          <div\n            role=\"status\"\n            aria-live=\"polite\"\n            className={classJoin(\n              className('summary'),\n              this.config.className.paginationSummary,\n            )}\n            title={this._(\n              'pagination.navigate',\n              this.state.page + 1,\n              this.pages,\n            )}\n          >\n            {this._('pagination.showing')}{' '}\n            <b>{this._(`${this.state.page * this.state.limit + 1}`)}</b>{' '}\n            {this._('pagination.to')}{' '}\n            <b>\n              {this._(\n                `${Math.min(\n                  (this.state.page + 1) * this.state.limit,\n                  this.state.total,\n                )}`,\n              )}\n            </b>{' '}\n            {this._('pagination.of')} <b>{this._(`${this.state.total}`)}</b>{' '}\n            {this._('pagination.results')}\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n\n  render() {\n    if (!this.props.enabled) return null;\n\n    return (\n      <div\n        className={classJoin(\n          className('pagination'),\n          this.config.className.pagination,\n        )}\n      >\n        {this.renderSummary()}\n\n        <div className={className('pages')}>\n          {this.props.prevButton && (\n            <button\n              tabIndex={0}\n              role=\"button\"\n              disabled={this.state.page === 0}\n              onClick={this.setPage.bind(this, this.state.page - 1)}\n              title={this._('pagination.previous')}\n              aria-label={this._('pagination.previous')}\n              className={classJoin(\n                this.config.className.paginationButton,\n                this.config.className.paginationButtonPrev,\n              )}\n            >\n              {this._('pagination.previous')}\n            </button>\n          )}\n\n          {this.renderPages()}\n\n          {this.props.nextButton && (\n            <button\n              tabIndex={0}\n              role=\"button\"\n              disabled={this.pages === this.state.page + 1 || this.pages === 0}\n              onClick={this.setPage.bind(this, this.state.page + 1)}\n              title={this._('pagination.next')}\n              aria-label={this._('pagination.next')}\n              className={classJoin(\n                this.config.className.paginationButton,\n                this.config.className.paginationButtonNext,\n              )}\n            >\n              {this._('pagination.next')}\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n", "export function width(width: string | number, containerWidth?: number): number {\n  if (typeof width == 'string') {\n    if (width.indexOf('%') > -1) {\n      return (containerWidth / 100) * parseInt(width, 10);\n    } else {\n      return parseInt(width, 10);\n    }\n  }\n\n  return width;\n}\n\nexport function px(width: number): string {\n  if (!width) return '';\n  return `${Math.floor(width)}px`;\n}\n", "import { Component, h, RefObject } from 'preact';\nimport { BaseComponent, BaseProps } from '../base';\nimport { className } from '../../util/className';\n\ninterface ShadowTableProps extends BaseProps {\n  tableRef?: RefObject<Component>;\n}\n\n/**\n * ShadowTable renders a hidden table and is used to calculate the column's width\n * when autoWidth option is enabled\n */\nexport class ShadowTable extends BaseComponent<ShadowTableProps> {\n  private tableElement: HTMLTableElement;\n  private tableClassName: string;\n  private tableStyle: string;\n\n  constructor(props, context) {\n    super(props, context);\n\n    const tableRef = this.props.tableRef;\n    this.tableElement = tableRef.current.base.cloneNode(\n      true,\n    ) as HTMLTableElement;\n\n    this.tableElement.style.position = 'absolute';\n    this.tableElement.style.width = '100%';\n    this.tableElement.style.zIndex = '-2147483640';\n    this.tableElement.style.visibility = 'hidden';\n\n    this.tableClassName = this.tableElement.className;\n    this.tableStyle = this.tableElement.style.cssText;\n  }\n\n  public widths(): { [columnId: string]: { minWidth: number; width: number } } {\n    this.tableElement.className = `${this.tableClassName} ${className(\n      'shadowTable',\n    )}`;\n\n    this.tableElement.style.tableLayout = 'auto';\n    this.tableElement.style.width = 'auto';\n    this.tableElement.style.padding = '0';\n    this.tableElement.style.margin = '0';\n    this.tableElement.style.border = 'none';\n    this.tableElement.style.outline = 'none';\n\n    let obj = Array.from(\n      this.base.parentNode.querySelectorAll<HTMLElement>('thead th'),\n    ).reduce((prev, current) => {\n      current.style.width = `${current.clientWidth}px`;\n\n      return {\n        [current.getAttribute('data-column-id')]: {\n          minWidth: current.clientWidth,\n        },\n        ...prev,\n      };\n    }, {});\n\n    this.tableElement.className = this.tableClassName;\n    this.tableElement.style.cssText = this.tableStyle;\n    this.tableElement.style.tableLayout = 'auto';\n\n    obj = Array.from(\n      this.base.parentNode.querySelectorAll<HTMLElement>('thead th'),\n    ).reduce((prev, current) => {\n      prev[current.getAttribute('data-column-id')]['width'] =\n        current.clientWidth;\n\n      return prev;\n    }, obj);\n\n    return obj;\n  }\n\n  render() {\n    if (this.props.tableRef.current) {\n      return (\n        <div\n          ref={(nodeElement) => {\n            nodeElement && nodeElement.appendChild(this.tableElement);\n          }}\n        />\n      );\n    }\n\n    return null;\n  }\n}\n", "export function camelCase(str: string): string {\n  if (!str) return '';\n\n  const words = str.split(' ');\n\n  // do not convert strings that are already in camelCase format\n  if (words.length === 1 && /([a-z][A-Z])+/g.test(str)) {\n    return str;\n  }\n\n  return words\n    .map(function (word, index) {\n      // if it is the first word, lowercase all the chars\n      if (index == 0) {\n        return word.toLowerCase();\n      }\n\n      // if it is not the first word only upper case the first char and lowercase the rest\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    })\n    .join('');\n}\n", "import { OneDArray, TColumn, TwoDArray } from './types';\nimport Base from './base';\nimport { Config, UserConfig } from './config';\nimport { px, width } from './util/width';\nimport { ShadowTable } from './view/table/shadow';\nimport {\n  Component,\n  ComponentChild,\n  createRef,\n  h,\n  isValidElement,\n  RefObject,\n  render,\n} from 'preact';\nimport { camelCase } from './util/string';\nimport { flatten } from './util/array';\nimport logger from './util/log';\nimport { PluginPosition } from './plugin';\n\nclass Header extends Base {\n  private _columns: OneDArray<TColumn>;\n\n  constructor() {\n    super();\n\n    this._columns = [];\n  }\n\n  get columns(): OneDArray<TColumn> {\n    return this._columns;\n  }\n\n  set columns(columns) {\n    this._columns = columns;\n  }\n\n  get visibleColumns(): OneDArray<TColumn> {\n    return this._columns.filter((c) => !c.hidden);\n  }\n\n  /**\n   * Tries to automatically adjust the width of columns based on:\n   *    - Header cell content\n   *    - Cell content of the first row\n   *    - Cell content of the last row\n   *\n   * @param config\n   */\n  adjustWidth(config: Config): this {\n    const container: Element = config.container;\n    const tableRef: RefObject<Component> = config.tableRef;\n    const tempRef: RefObject<HTMLDivElement> = config.tempRef;\n    const autoWidth = config.tempRef || true;\n\n    if (!container) {\n      // we can't calculate the width because the container\n      // is unknown at this stage\n      return this;\n    }\n\n    // pixels\n    const containerWidth = container.clientWidth;\n\n    // let's create a shadow table with the first 10 rows of the data\n    // and let the browser to render the table with table-layout: auto\n    // no padding, margin or border to get the minimum space required\n    // to render columns. One the table is rendered and widths are known,\n    // we unmount the shadow table from the DOM and set the correct width\n    const shadowTable = createRef();\n    let widths = {};\n\n    if (tableRef.current && autoWidth) {\n      // render a ShadowTable with the first 10 rows\n      const el = h(ShadowTable, {\n        tableRef: tableRef,\n      });\n      el.ref = shadowTable;\n\n      render(el, tempRef.current);\n\n      widths = shadowTable.current.widths();\n    }\n\n    for (const column of flatten(Header.tabularFormat(this.columns))) {\n      // because we don't want to set the width of parent THs\n      if (column.columns && column.columns.length > 0) {\n        continue;\n      }\n\n      if (!column.width && autoWidth) {\n        // tries to find the corresponding cell\n        // from the ShadowTable and set the correct width\n\n        if (column.id in widths) {\n          // because a column can be hidden, too\n          column.width = px(widths[column.id]['width']);\n          column.minWidth = px(widths[column.id]['minWidth']);\n        }\n      } else {\n        // column width is already defined\n        // sets the column with based on the width of its container\n        column.width = px(width(column.width, containerWidth));\n      }\n    }\n\n    if (tableRef.current && autoWidth) {\n      // unmount the shadow table from temp\n      render(null, tempRef.current);\n    }\n\n    return this;\n  }\n\n  private setSort(userConfig: UserConfig, columns?: OneDArray<TColumn>): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      // sorting can only be enabled for columns without any children\n      if (column.columns && column.columns.length > 0) {\n        column.sort = {\n          enabled: false,\n        };\n      }\n\n      // implicit userConfig.sort flag\n      if (column.sort === undefined && userConfig.sort) {\n        column.sort = {\n          enabled: true,\n        };\n      }\n\n      // false, null, etc.\n      if (!column.sort) {\n        column.sort = {\n          enabled: false,\n        };\n      } else if (typeof column.sort === 'object') {\n        column.sort = {\n          enabled: true,\n          ...column.sort,\n        };\n      }\n\n      if (column.columns) {\n        this.setSort(userConfig, column.columns);\n      }\n    }\n  }\n\n  private setFixedHeader(\n    userConfig: UserConfig,\n    columns?: OneDArray<TColumn>,\n  ): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      if (column.fixedHeader === undefined) {\n        column.fixedHeader = userConfig.fixedHeader;\n      }\n\n      if (column.columns) {\n        this.setFixedHeader(userConfig, column.columns);\n      }\n    }\n  }\n\n  private setResizable(\n    userConfig: UserConfig,\n    columns?: OneDArray<TColumn>,\n  ): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      if (column.resizable === undefined) {\n        column.resizable = userConfig.resizable;\n      }\n\n      if (column.columns) {\n        this.setResizable(userConfig, column.columns);\n      }\n    }\n  }\n\n  private setID(columns?: OneDArray<TColumn>): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      if (!column.id && typeof column.name === 'string') {\n        // let's guess the column ID if it's undefined\n        column.id = camelCase(column.name);\n      }\n\n      if (!column.id) {\n        logger.error(\n          `Could not find a valid ID for one of the columns. Make sure a valid \"id\" is set for all columns.`,\n        );\n      }\n\n      // nested columns\n      if (column.columns) {\n        this.setID(column.columns);\n      }\n    }\n  }\n\n  private populatePlugins(\n    userConfig: UserConfig,\n    columns: OneDArray<TColumn>,\n  ): void {\n    // populate the cell columns\n    for (const column of columns) {\n      if (column.plugin !== undefined) {\n        userConfig.plugin.add({\n          id: column.id,\n          props: {},\n          ...column.plugin,\n          position: PluginPosition.Cell,\n        });\n      }\n    }\n  }\n\n  static fromColumns(\n    columns: OneDArray<TColumn | string | ComponentChild>,\n  ): Header {\n    const header = new Header();\n\n    for (const column of columns) {\n      if (typeof column === 'string' || isValidElement(column)) {\n        header.columns.push({\n          name: column,\n        });\n      } else if (typeof column === 'object') {\n        const typedColumn = column as TColumn;\n\n        if (typedColumn.columns) {\n          typedColumn.columns = Header.fromColumns(typedColumn.columns).columns;\n        }\n\n        // because the data for that cell is null\n        // if we are trying to render a plugin\n        if (typeof typedColumn.plugin === 'object') {\n          if (typedColumn.data === undefined) {\n            typedColumn.data = null;\n          }\n        }\n\n        // TColumn type\n        header.columns.push(column as TColumn);\n      }\n    }\n\n    return header;\n  }\n\n  static fromUserConfig(userConfig: UserConfig): Header | null {\n    const header = new Header();\n\n    // TODO: this part needs some refactoring\n    if (userConfig.from) {\n      header.columns = Header.fromHTMLTable(userConfig.from).columns;\n    } else if (userConfig.columns) {\n      header.columns = Header.fromColumns(userConfig.columns).columns;\n    } else if (\n      userConfig.data &&\n      typeof userConfig.data[0] === 'object' &&\n      !(userConfig.data[0] instanceof Array)\n    ) {\n      // if data[0] is an object but not an Array\n      // used for when a JSON payload is provided\n      header.columns = Object.keys(userConfig.data[0]).map((name) => {\n        return { name: name };\n      });\n    }\n\n    if (header.columns.length) {\n      header.setID();\n      header.setSort(userConfig);\n      header.setFixedHeader(userConfig);\n      header.setResizable(userConfig);\n      header.populatePlugins(userConfig, header.columns);\n      return header;\n    }\n\n    return null;\n  }\n\n  static fromHTMLTable(element: HTMLElement): Header {\n    const header = new Header();\n    const thead = element.querySelector('thead');\n    const ths = thead.querySelectorAll('th');\n\n    for (const th of ths as any) {\n      header.columns.push({\n        name: th.innerHTML,\n        width: th.width,\n      });\n    }\n\n    return header;\n  }\n\n  /**\n   * Converts the tree-like format of Header to a tabular format\n   *\n   * Example:\n   *\n   *    H1\n   *      H1-H1\n   *      H1-H2\n   *    H2\n   *      H2-H1\n   *\n   *    becomes:\n   *      [\n   *        [H1, H2],\n   *        [H1-H1, H1-H2, H2-H1]\n   *      ]\n   *\n   * @param columns\n   */\n  static tabularFormat(columns: OneDArray<TColumn>): TwoDArray<TColumn> {\n    let result: TwoDArray<TColumn> = [];\n    const cols = columns || [];\n    let nextRow = [];\n\n    if (cols && cols.length) {\n      result.push(cols);\n\n      for (const col of cols) {\n        if (col.columns && col.columns.length) {\n          nextRow = nextRow.concat(col.columns);\n        }\n      }\n\n      if (nextRow.length) {\n        result = result.concat(this.tabularFormat(nextRow));\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns an array of leaf columns (last columns in the tree)\n   *\n   * @param columns\n   */\n  static leafColumns(columns: OneDArray<TColumn>): OneDArray<TColumn> {\n    let result: OneDArray<TColumn> = [];\n    const cols = columns || [];\n\n    if (cols && cols.length) {\n      for (const col of cols) {\n        if (!col.columns || col.columns.length === 0) {\n          result.push(col);\n        }\n\n        if (col.columns) {\n          result = result.concat(this.leafColumns(col.columns));\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns the maximum depth of a column tree\n   * @param column\n   */\n  static maximumDepth(column: TColumn): number {\n    return this.tabularFormat([column]).length - 1;\n  }\n}\n\nexport default Header;\n", "const _prefix = 'ID_';\n\n/**\n * This class is mostly based on Flux's Dispatcher by Facebook\n * https://github.com/facebook/flux/blob/master/src/Dispatcher.js\n */\nexport default class Dispatcher<TPayload> {\n  _callbacks: { [key: string]: (payload: TPayload) => void };\n  _isDispatching: boolean;\n  _isHandled: { [key: string]: boolean };\n  _isPending: { [key: string]: boolean };\n  _lastID: number;\n  _pendingPayload: TPayload;\n\n  constructor() {\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n  /**\n   * Registers a callback to be invoked with every dispatched payload. Returns\n   * a token that can be used with `waitFor()`.\n   */\n  register(callback: (payload: TPayload) => void): string {\n    const id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  }\n  /**\n   * Removes a callback based on its token.\n   */\n  unregister(id: string): void {\n    if (!this._callbacks[id]) {\n      throw Error(\n        `Dispatcher.unregister(...): ${id} does not map to a registered callback.`,\n      );\n    }\n\n    delete this._callbacks[id];\n  }\n  /**\n   * Waits for the callbacks specified to be invoked before continuing execution\n   * of the current callback. This method should only be used by a callback in\n   * response to a dispatched payload.\n   */\n  waitFor(ids: Array<string>): void {\n    if (!this._isDispatching) {\n      throw Error(\n        'Dispatcher.waitFor(...): Must be invoked while dispatching.',\n      );\n    }\n\n    for (let ii = 0; ii < ids.length; ii++) {\n      const id = ids[ii];\n      if (this._isPending[id]) {\n        if (!this._isHandled[id]) {\n          throw Error(`Dispatcher.waitFor(...): Circular dependency detected while ' +\n            'waiting for ${id}.`);\n        }\n        continue;\n      }\n      if (!this._callbacks[id]) {\n        throw Error(\n          `Dispatcher.waitFor(...): ${id} does not map to a registered callback.`,\n        );\n      }\n\n      this._invokeCallback(id);\n    }\n  }\n  /**\n   * Dispatches a payload to all registered callbacks.\n   */\n  dispatch(payload: TPayload): void {\n    if (this._isDispatching) {\n      throw Error(\n        'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.',\n      );\n    }\n\n    this._startDispatching(payload);\n    try {\n      for (const id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  }\n  /**\n   * Is this Dispatcher currently dispatching.\n   */\n  isDispatching(): boolean {\n    return this._isDispatching;\n  }\n  /**\n   * Call the callback stored with the given id. Also do some internal\n   * bookkeeping.\n   *\n   * @internal\n   */\n  private _invokeCallback(id: string): void {\n    this._isPending[id] = true;\n    this._callbacks[id](this._pendingPayload);\n    this._isHandled[id] = true;\n  }\n  /**\n   * Set up bookkeeping needed when dispatching.\n   *\n   * @internal\n   */\n  private _startDispatching(payload: TPayload): void {\n    for (const id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  }\n  /**\n   * Clear bookkeeping used for dispatching.\n   *\n   * @internal\n   */\n  private _stopDispatching(): void {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  }\n}\n", "/**\n * Base Storage class. All storage implementation must inherit this class\n */\nimport { TData } from '../types';\n\nabstract class Storage<I> {\n  /**\n   * Returns all rows based on ...args\n   * @param args\n   */\n  abstract get(...args): Promise<StorageResponse>;\n\n  /**\n   * To set all rows\n   *\n   * @param data\n   */\n  set?(data: I | ((...args) => void)): this;\n}\n\nexport interface StorageResponse {\n  data: TData;\n  total: number;\n}\n\nexport default Storage;\n", "import Storage, { StorageResponse } from './storage';\nimport { TData } from '../types';\n\nclass MemoryStorage extends Storage<TData> {\n  private data: (() => TData) | (() => Promise<TData>);\n\n  constructor(data: TData | (() => TData) | (() => Promise<TData>)) {\n    super();\n    this.set(data);\n  }\n\n  public async get(): Promise<StorageResponse> {\n    const data = await this.data();\n\n    return {\n      data: data,\n      total: data.length,\n    };\n  }\n\n  public set(data: TData | (() => TData) | (() => Promise<TData>)): this {\n    if (data instanceof Array) {\n      this.data = (): TData => data;\n    } else if (data instanceof Function) {\n      this.data = data;\n    }\n\n    return this;\n  }\n}\n\nexport default MemoryStorage;\n", "import Storage, { StorageResponse } from './storage';\nimport log from '../util/log';\n\nexport interface ServerStorageOptions extends RequestInit {\n  url: string;\n  // to format the data and columns\n  then?: (data: any) => any[][];\n  // to handle the response from the server. `handle` will\n  // be called first and then `then` callback will be invoked\n  // The purpose of this function is to handle the behaviour\n  // of server and either reject and resolve the initial response\n  // before calling the `then` function\n  handle?: (response: Response) => Promise<any>;\n  total?: (data: any) => number;\n  // to bypass the current implementation of ServerStorage and process the\n  // request manually (e.g. when user wants to connect their own SDK/HTTP Client)\n  data?: (opts: ServerStorageOptions) => Promise<StorageResponse>;\n}\n\nclass ServerStorage extends Storage<ServerStorageOptions> {\n  private readonly options: ServerStorageOptions;\n\n  constructor(options: ServerStorageOptions) {\n    super();\n    this.options = options;\n  }\n\n  private handler(response: Response): Promise<any> {\n    if (typeof this.options.handle === 'function') {\n      return this.options.handle(response);\n    }\n\n    if (response.ok) {\n      return response.json();\n    } else {\n      log.error(\n        `Could not fetch data: ${response.status} - ${response.statusText}`,\n        true,\n      );\n      return null;\n    }\n  }\n\n  public get(options?: ServerStorageOptions): Promise<StorageResponse> {\n    // this.options is the initial config object\n    // options is the runtime config passed by the pipeline (e.g. search component)\n    const opts = {\n      ...this.options,\n      ...options,\n    };\n\n    // if `options.data` is provided, the current ServerStorage\n    // implementation will be ignored and we let options.data to\n    // handle the request. Useful when HTTP client needs to be\n    // replaced with something else\n    if (typeof opts.data === 'function') {\n      return opts.data(opts);\n    }\n\n    return fetch(opts.url, opts)\n      .then(this.handler.bind(this))\n      .then((res) => {\n        return {\n          data: opts.then(res),\n          total: typeof opts.total === 'function' ? opts.total(res) : undefined,\n        };\n      });\n  }\n}\n\nexport default ServerStorage;\n", "import { UserConfig } from '../config';\nimport MemoryStorage from './memory';\nimport Storage from './storage';\nimport ServerStorage from './server';\nimport log from '../util/log';\nimport { decode, html } from '../util/html';\n\nclass StorageUtils {\n  /**\n   * Accepts the userConfig dict and tries to guess and return a Storage type\n   *\n   * @param userConfig\n   */\n  public static createFromUserConfig(userConfig: UserConfig): Storage<any> {\n    let storage = null;\n    // `data` array is provided\n    if (userConfig.data) {\n      storage = new MemoryStorage(userConfig.data);\n    }\n\n    if (userConfig.from) {\n      storage = new MemoryStorage(this.tableElementToArray(userConfig.from));\n      // remove the source table element from the DOM\n      userConfig.from.style.display = 'none';\n    }\n\n    if (userConfig.server) {\n      storage = new ServerStorage(userConfig.server);\n    }\n\n    if (!storage) {\n      log.error('Could not determine the storage type', true);\n    }\n\n    return storage;\n  }\n\n  /**\n   * Accepts a HTML table element and converts it into a 2D array of data\n   *\n   * TODO: This function can be a step in the pipeline: Convert Table -> Load into a memory storage -> ...\n   *\n   * @param element\n   */\n  static tableElementToArray(element: HTMLElement): any[][] {\n    const arr = [];\n    const tbody = element.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n\n    for (const row of rows as any) {\n      const cells: HTMLElement[] = row.querySelectorAll('td');\n      const parsedRow = [];\n\n      for (const cell of cells) {\n        // try to capture a TD with single text element first\n        if (\n          cell.childNodes.length === 1 &&\n          cell.childNodes[0].nodeType === Node.TEXT_NODE\n        ) {\n          parsedRow.push(decode(cell.innerHTML));\n        } else {\n          parsedRow.push(html(cell.innerHTML));\n        }\n      }\n\n      arr.push(parsedRow);\n    }\n\n    return arr;\n  }\n}\n\nexport default StorageUtils;\n", "import { PipelineProcessor, ProcessorType } from './processor';\nimport { ID } from '../util/id';\nimport log from '../util/log';\nimport { EventEmitter } from '../util/eventEmitter';\n\ninterface PipelineEvents<T> {\n  /**\n   * Generic updated event. Triggers the callback function when the pipeline\n   * is updated, including when a new processor is registered, a processor's props\n   * get updated, etc.\n   */\n  updated: (processor: PipelineProcessor<any, any>) => void;\n  /**\n   * Triggers the callback function when a new\n   * processor is registered successfully\n   */\n  afterRegister: () => void;\n  /**\n   * Triggers the callback when a registered\n   * processor's property is updated\n   */\n  propsUpdated: () => void;\n  /**\n   * Triggers the callback function when the pipeline\n   * is fully processed, before returning the results\n   *\n   * afterProcess will not be called if there is an\n   * error in the pipeline (i.e a step throw an Error)\n   */\n  afterProcess: (prev: T) => void;\n  /**\n   * Triggers the callback function when the pipeline\n   * fails to process all steps or at least one step\n   * throws an Error\n   */\n  error: (prev: T) => void;\n}\n\nclass Pipeline<T, P = unknown> extends EventEmitter<PipelineEvents<T>> {\n  // available steps for this pipeline\n  private readonly _steps: Map<ProcessorType, PipelineProcessor<T, P>[]> =\n    new Map<ProcessorType, PipelineProcessor<T, P>[]>();\n  // used to cache the results of processors using their id field\n  private cache: Map<string, any> = new Map<string, any>();\n  // keeps the index of the last updated processor in the registered\n  // processors list and will be used to invalidate the cache\n  // -1 means all new processors should be processed\n  private lastProcessorIndexUpdated = -1;\n\n  constructor(steps?: PipelineProcessor<any, any>[]) {\n    super();\n\n    if (steps) {\n      steps.forEach((step) => this.register(step));\n    }\n  }\n\n  /**\n   * Clears the `cache` array\n   */\n  clearCache(): void {\n    this.cache = new Map<string, any>();\n    this.lastProcessorIndexUpdated = -1;\n  }\n\n  /**\n   * Registers a new processor\n   *\n   * @param processor\n   * @param priority\n   */\n  register(\n    processor: PipelineProcessor<any, any>,\n    priority: number = null,\n  ): void {\n    if (processor.type === null) {\n      throw Error('Processor type is not defined');\n    }\n\n    // binding the propsUpdated callback to the Pipeline\n    processor.on('propsUpdated', this.processorPropsUpdated.bind(this));\n\n    this.addProcessorByPriority(processor, priority);\n    this.afterRegistered(processor);\n  }\n\n  /**\n   * Removes a processor from the list\n   *\n   * @param processor\n   */\n  unregister(processor: PipelineProcessor<any, any>): void {\n    if (!processor) return;\n\n    const subSteps = this._steps.get(processor.type);\n\n    if (subSteps && subSteps.length) {\n      this._steps.set(\n        processor.type,\n        subSteps.filter((proc) => proc != processor),\n      );\n      this.emit('updated', processor);\n    }\n  }\n\n  /**\n   * Registers a new processor\n   *\n   * @param processor\n   * @param priority\n   */\n  private addProcessorByPriority(\n    processor: PipelineProcessor<T, P>,\n    priority: number,\n  ): void {\n    let subSteps = this._steps.get(processor.type);\n\n    if (!subSteps) {\n      const newSubStep = [];\n      this._steps.set(processor.type, newSubStep);\n      subSteps = newSubStep;\n    }\n\n    if (priority === null || priority < 0) {\n      subSteps.push(processor);\n    } else {\n      if (!subSteps[priority]) {\n        // slot is empty\n        subSteps[priority] = processor;\n      } else {\n        // slot is NOT empty\n        const first = subSteps.slice(0, priority - 1);\n        const second = subSteps.slice(priority + 1);\n\n        this._steps.set(processor.type, first.concat(processor).concat(second));\n      }\n    }\n  }\n\n  /**\n   * Flattens the _steps Map and returns a list of steps with their correct priorities\n   */\n  get steps(): PipelineProcessor<T, P>[] {\n    let steps: PipelineProcessor<T, P>[] = [];\n\n    for (const type of this.getSortedProcessorTypes()) {\n      const subSteps = this._steps.get(type);\n\n      if (subSteps && subSteps.length) {\n        steps = steps.concat(subSteps);\n      }\n    }\n\n    // to remove any undefined elements\n    return steps.filter((s) => s);\n  }\n\n  /**\n   * Accepts ProcessType and returns an array of the registered processes\n   * with the give type\n   *\n   * @param type\n   */\n  getStepsByType(type: ProcessorType): PipelineProcessor<T, P>[] {\n    return this.steps.filter((process) => process.type === type);\n  }\n\n  /**\n   * Returns a list of ProcessorType according to their priority\n   */\n  private getSortedProcessorTypes(): ProcessorType[] {\n    return Object.keys(ProcessorType)\n      .filter((key) => !isNaN(Number(key)))\n      .map((key) => Number(key));\n  }\n\n  /**\n   * Runs all registered processors based on their correct priority\n   * and returns the final output after running all steps\n   *\n   * @param data\n   */\n  async process(data?: T): Promise<T> {\n    const lastProcessorIndexUpdated = this.lastProcessorIndexUpdated;\n    const steps = this.steps;\n\n    let prev = data;\n\n    try {\n      for (const processor of steps) {\n        const processorIndex = this.findProcessorIndexByID(processor.id);\n\n        if (processorIndex >= lastProcessorIndexUpdated) {\n          // we should execute process() here since the last\n          // updated processor was before \"processor\".\n          // This is to ensure that we always have correct and up to date\n          // data from processors and also to skip them when necessary\n          prev = await processor.process(prev);\n          this.cache.set(processor.id, prev);\n        } else {\n          // cached results already exist\n          prev = this.cache.get(processor.id);\n        }\n      }\n    } catch (e) {\n      log.error(e);\n      // trigger the onError callback\n      this.emit('error', prev);\n\n      // rethrow\n      throw e;\n    }\n\n    // means the pipeline is up to date\n    this.lastProcessorIndexUpdated = steps.length;\n\n    // triggers the afterProcess callbacks with the results\n    this.emit('afterProcess', prev);\n\n    return prev;\n  }\n\n  /**\n   * Returns the registered processor's index in _steps array\n   *\n   * @param processorID\n   */\n  private findProcessorIndexByID(processorID: ID): number {\n    return this.steps.findIndex((p) => p.id == processorID);\n  }\n\n  /**\n   * Sets the last updates processors index locally\n   * This is used to invalid or skip a processor in\n   * the process() method\n   */\n  private setLastProcessorIndex(processor: PipelineProcessor<T, P>): void {\n    const processorIndex = this.findProcessorIndexByID(processor.id);\n\n    if (this.lastProcessorIndexUpdated > processorIndex) {\n      this.lastProcessorIndexUpdated = processorIndex;\n    }\n  }\n\n  private processorPropsUpdated(processor): void {\n    this.setLastProcessorIndex(processor);\n    this.emit('propsUpdated');\n    this.emit('updated', processor);\n  }\n\n  private afterRegistered(processor): void {\n    this.setLastProcessorIndex(processor);\n    this.emit('afterRegister');\n    this.emit('updated', processor);\n  }\n}\n\nexport default Pipeline;\n", "import { ComponentChild } from 'preact';\nimport Row from './row';\nimport { SortConfig } from './view/plugin/sort/sort';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { Plugin } from './plugin';\n\nexport type ProtoExtends<T, U> = U & Omit<T, keyof U>;\n\nexport type OneDArray<T> = T[];\nexport type TwoDArray<T> = T[][];\n\n/**\n * Table cell types\n */\nexport type TCell = number | string | boolean | ComponentChild | HTMLElement;\n// Array of Arrays\nexport type TDataArrayRow = OneDArray<TCell>;\nexport type TDataArray = OneDArray<TDataArrayRow>;\n// Array of Objects\nexport type TDataObjectRow = { [key: string]: TCell };\nexport type TDataObject = OneDArray<TDataObjectRow>;\n// (Array of Arrays) and (Array of Objects)\nexport type TData = TDataArray | TDataObject;\n\n// Table header cell type\nexport interface TColumn {\n  id?: string;\n  // default data for all columns\n  data?: ((row: TDataArrayRow | TDataObjectRow) => TCell) | TCell;\n  // column label\n  name?: string | ComponentChild;\n  plugin?: Plugin<any>;\n  // column width\n  width?: string;\n  minWidth?: string;\n  sort?: SortConfig;\n  columns?: OneDArray<TColumn>;\n  fixedHeader?: boolean;\n  resizable?: boolean;\n  hidden?: boolean;\n  formatter?: (cell: TCell, row: Row, column: TColumn) => ComponentChild;\n  // HTML attributes to be added to all cells and header of this column\n  attributes?:\n    | ((\n        // this is null when `attributes` is called for a th\n        cell: TCell | null,\n        row: Row | null,\n        column: TColumn,\n      ) => JSXInternal.HTMLAttributes<HTMLTableCellElement>)\n    | JSXInternal.HTMLAttributes<HTMLTableCellElement>;\n}\n\n// Comparator function for the sorting plugin\nexport type Comparator<T> = (a: T, b: T) => number;\n\nexport interface TColumnSort {\n  index: number;\n  // 1 ascending, -1 descending\n  direction?: 1 | -1;\n}\n\n// container status\nexport enum Status {\n  Init,\n  Loading,\n  Loaded,\n  Rendered,\n  Error,\n}\n\nexport type CSSDeclaration = {\n  [key: string]: string | number;\n};\n", "import Storage, { StorageResponse } from '../../storage/storage';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\n\ninterface StorageExtractorProps extends PipelineProcessorProps {\n  storage: Storage<any>;\n}\n\nclass StorageExtractor extends PipelineProcessor<\n  Promise<StorageResponse>,\n  StorageExtractorProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Extractor;\n  }\n\n  async _process(opts: any): Promise<StorageResponse> {\n    return await this.props.storage.get(opts);\n  }\n}\n\nexport default StorageExtractor;\n", "import { PipelineProcessor, ProcessorType } from '../processor';\nimport Tabular from '../../tabular';\nimport { ArrayResponse } from './storageResponseToArray';\n\nclass ArrayToTabularTransformer extends PipelineProcessor<\n  Tabular,\n  Record<string, any>\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Transformer;\n  }\n\n  _process(arrayResponse: ArrayResponse): Tabular {\n    const tabular = Tabular.fromArray(arrayResponse.data);\n\n    // for server-side storage\n    tabular.length = arrayResponse.total;\n\n    return tabular;\n  }\n}\n\nexport default ArrayToTabularTransformer;\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\n\ninterface ServerInitiatorProps extends PipelineProcessorProps {\n  serverStorageOptions: ServerStorageOptions;\n}\n\nclass ServerInitiator extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerInitiatorProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Initiator;\n  }\n\n  _process(): ServerStorageOptions {\n    return Object.entries(this.props.serverStorageOptions)\n      .filter(([_, val]) => typeof val !== 'function')\n      .reduce(\n        (acc, [k, v]) => ({ ...acc, [k]: v }),\n        {},\n      ) as ServerStorageOptions;\n  }\n}\n\nexport default ServerInitiator;\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { StorageResponse } from '../../storage/storage';\nimport { TCell, TData, TDataArray, TDataObject, TwoDArray } from '../../types';\nimport Header from '../../header';\nimport logger from '../../util/log';\n\nexport interface ArrayResponse {\n  data: TwoDArray<TCell>;\n  total: number;\n}\n\ninterface StorageResponseToArrayTransformerProps\n  extends PipelineProcessorProps {\n  header: Header;\n}\n\nclass StorageResponseToArrayTransformer extends PipelineProcessor<\n  ArrayResponse,\n  StorageResponseToArrayTransformerProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Transformer;\n  }\n\n  private castData(data: TData): TwoDArray<TCell> {\n    if (!data || !data.length) {\n      return [];\n    }\n\n    if (!this.props.header || !this.props.header.columns) {\n      return data as TwoDArray<TCell>;\n    }\n\n    const columns = Header.leafColumns(this.props.header.columns);\n\n    // if it's a 2d array already\n    if (data[0] instanceof Array) {\n      return (data as TDataArray).map((row) => {\n        let pad = 0;\n\n        return columns.map((column, i) => {\n          // default `data` is provided for this column\n          if (column.data !== undefined) {\n            pad++;\n\n            if (typeof column.data === 'function') {\n              return column.data(row);\n            } else {\n              return column.data;\n            }\n          }\n\n          return row[i - pad];\n        });\n      });\n    }\n\n    // if it's an array of objects (but not array of arrays, i.e JSON payload)\n    if (typeof data[0] === 'object' && !(data[0] instanceof Array)) {\n      return (data as TDataObject).map((row) =>\n        columns.map((column, i) => {\n          if (column.data !== undefined) {\n            if (typeof column.data === 'function') {\n              return column.data(row);\n            } else {\n              return column.data;\n            }\n          } else if (column.id) {\n            return row[column.id];\n          } else {\n            logger.error(`Could not find the correct cell for column at position ${i}.\n                          Make sure either 'id' or 'selector' is defined for all columns.`);\n            return null;\n          }\n        }),\n      );\n    }\n\n    return [];\n  }\n\n  _process(storageResponse: StorageResponse): ArrayResponse {\n    return {\n      data: this.castData(storageResponse.data),\n      total: storageResponse.total,\n    };\n  }\n}\n\nexport default StorageResponseToArrayTransformer;\n", "import { Config } from '../config';\nimport Pipeline from './pipeline';\nimport Tabular from '../tabular';\nimport StorageExtractor from './extractor/storage';\nimport ArrayToTabularTransformer from './transformer/arrayToTabular';\nimport ServerStorage from '../storage/server';\nimport ServerInitiator from './initiator/server';\nimport StorageResponseToArrayTransformer from './transformer/storageResponseToArray';\n\nclass PipelineUtils {\n  static createFromConfig(config: Config): Pipeline<Tabular> {\n    const pipeline = new Pipeline<Tabular>();\n\n    if (config.storage instanceof ServerStorage) {\n      pipeline.register(\n        new ServerInitiator({\n          serverStorageOptions: config.server,\n        }),\n      );\n    }\n\n    pipeline.register(new StorageExtractor({ storage: config.storage }));\n    pipeline.register(\n      new StorageResponseToArrayTransformer({ header: config.header }),\n    );\n    pipeline.register(new ArrayToTabularTransformer());\n\n    return pipeline;\n  }\n}\n\nexport default PipelineUtils;\n", "import {\n  CSSDeclaration,\n  OneDArray,\n  ProtoExtends,\n  TColumn,\n  TData,\n} from './types';\nimport Storage from './storage/storage';\nimport Pipeline from './pipeline/pipeline';\nimport Tabular from './tabular';\nimport { Search, SearchConfig } from './view/plugin/search/search';\nimport { Pagination, PaginationConfig } from './view/plugin/pagination';\nimport Header from './header';\nimport { ServerStorageOptions } from './storage/server';\nimport Dispatcher from './util/dispatcher';\nimport { GenericSortConfig } from './view/plugin/sort/sort';\nimport { Language, Translator } from './i18n/language';\nimport { Component, ComponentChild, createRef, RefObject } from 'preact';\nimport StorageUtils from './storage/storageUtils';\nimport PipelineUtils from './pipeline/pipelineUtils';\nimport { EventEmitter } from './util/eventEmitter';\nimport { GridEvents } from './events';\nimport { PluginManager, PluginPosition, Plugin } from './plugin';\nimport Grid from './grid';\n\n// Config type used internally\nexport interface Config {\n  // a reference to the current Grid.js instance\n  instance: Grid;\n  eventEmitter: EventEmitter<GridEvents>;\n  dispatcher: Dispatcher<any>;\n  plugin: PluginManager;\n  /** container element that is used to mount the Grid.js to */\n  // TODO: change this to an element reference\n  container?: Element;\n  /** pointer to the main table element */\n  tableRef?: RefObject<Component>;\n  /** gridjs-temp div which is used internally */\n  tempRef?: RefObject<HTMLDivElement>;\n  data?: TData | (() => TData) | (() => Promise<TData>);\n  server?: ServerStorageOptions;\n  header?: Header;\n  /** to parse a HTML table and load the data */\n  from: HTMLElement;\n  storage: Storage<any>;\n  pipeline: Pipeline<Tabular>;\n  /** to automatically calculate the columns width */\n  autoWidth: boolean;\n  /** sets the width of the container and table */\n  width: string;\n  /** sets the height of the table */\n  height: string;\n  pagination: PaginationConfig;\n  sort: GenericSortConfig;\n  translator: Translator;\n  style?: Partial<{\n    table: CSSDeclaration;\n    td: CSSDeclaration;\n    th: CSSDeclaration;\n    container: CSSDeclaration;\n    header: CSSDeclaration;\n    footer: CSSDeclaration;\n  }>;\n  className?: Partial<{\n    table: string;\n    th: string;\n    thead: string;\n    tbody: string;\n    tr: string;\n    td: string;\n    container: string;\n    footer: string;\n    header: string;\n    search: string;\n    sort: string;\n    pagination: string;\n    paginationSummary: string;\n    paginationButton: string;\n    paginationButtonNext: string;\n    paginationButtonCurrent: string;\n    paginationButtonPrev: string;\n    loading: string;\n    notfound: string;\n    error: string;\n  }>;\n}\n\n// Config type used by the consumers\ninterface UserConfigExtend {\n  /** fixes the table header to the top of the table */\n  fixedHeader: boolean;\n  /** Resizable columns? */\n  resizable: boolean;\n  columns: OneDArray<TColumn | string | ComponentChild>;\n  search: SearchConfig | boolean;\n  pagination: PaginationConfig | boolean;\n  // implicit option to enable the sort plugin globally\n  sort: GenericSortConfig | boolean;\n  language: Language;\n  plugins?: Plugin<any>[];\n}\n\nexport type UserConfig = ProtoExtends<\n  Partial<Config>,\n  Partial<UserConfigExtend>\n>;\n\nexport class Config {\n  // this is the config file passed by the user\n  // we need this for Config.update()\n  private _userConfig: UserConfig;\n\n  constructor(config?: Partial<Config>) {\n    Object.assign(this, {\n      ...Config.defaultConfig(),\n      ...config,\n    });\n\n    this._userConfig = {};\n  }\n\n  /**\n   * Assigns `updatedConfig` keys to the current config file\n   *\n   * @param updatedConfig\n   */\n  assign(updatedConfig: Partial<Config>): Config {\n    for (const key of Object.keys(updatedConfig)) {\n      // because we don't want to update the _userConfig cache\n      if (key === '_userConfig') continue;\n\n      this[key] = updatedConfig[key];\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the config from a UserConfig\n   *\n   * @param userConfig\n   */\n  update(userConfig: Partial<UserConfig>): Config {\n    if (!userConfig) return this;\n\n    this._userConfig = {\n      ...this._userConfig,\n      ...userConfig,\n    };\n\n    this.assign(Config.fromUserConfig(this._userConfig));\n\n    return this;\n  }\n\n  static defaultConfig(): Config {\n    return {\n      plugin: new PluginManager(),\n      dispatcher: new Dispatcher<any>(),\n      tableRef: createRef(),\n      tempRef: createRef(),\n      width: '100%',\n      height: 'auto',\n      autoWidth: true,\n      style: {},\n      className: {},\n    } as Config;\n  }\n\n  static fromUserConfig(userConfig: UserConfig): Config {\n    const config = new Config(userConfig as Config);\n\n    // to set the initial _userConfig object\n    config._userConfig = userConfig;\n\n    // Sort\n    if (typeof userConfig.sort === 'boolean' && userConfig.sort) {\n      config.assign({\n        sort: {\n          multiColumn: true,\n        },\n      });\n    }\n\n    // Header\n    config.assign({\n      header: Header.fromUserConfig(config),\n    });\n\n    config.assign({\n      storage: StorageUtils.createFromUserConfig(userConfig),\n    });\n\n    config.assign({\n      pipeline: PipelineUtils.createFromConfig(config),\n    });\n\n    // Translator\n    config.assign({\n      translator: new Translator(userConfig.language),\n    });\n\n    // Search\n    config.plugin.add({\n      id: 'search',\n      position: PluginPosition.Header,\n      component: Search,\n      props: {\n        enabled:\n          userConfig.search === true || userConfig.search instanceof Object,\n        ...(userConfig.search as SearchConfig),\n      },\n    });\n\n    // Pagination\n    config.plugin.add({\n      id: 'pagination',\n      position: PluginPosition.Footer,\n      component: Pagination,\n      props: {\n        enabled:\n          userConfig.pagination === true ||\n          userConfig.pagination instanceof Object,\n        ...(userConfig.pagination as PaginationConfig),\n      },\n    });\n\n    // Additional plugins\n    if (userConfig.plugins) {\n      userConfig.plugins.forEach((p) => config.plugin.add(p));\n    }\n\n    return config;\n  }\n}\n", "import{options as n}from\"preact\";var t,u,r,o=0,i=[],c=n.__b,f=n.__r,e=n.diffed,a=n.__c,v=n.unmount;function m(t,r){n.__h&&n.__h(u,t,o||r),o=0;var i=u.__H||(u.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({}),i.__[t]}function l(n){return o=1,p(w,n)}function p(n,r,o){var i=m(t++,2);return i.t=n,i.__c||(i.__=[o?o(r):w(void 0,r),function(n){var t=i.t(i.__[0],n);i.__[0]!==t&&(i.__=[t,i.__[1]],i.__c.setState({}))}],i.__c=u),i.__}function y(r,o){var i=m(t++,3);!n.__s&&k(i.__H,o)&&(i.__=r,i.__H=o,u.__H.__h.push(i))}function h(r,o){var i=m(t++,4);!n.__s&&k(i.__H,o)&&(i.__=r,i.__H=o,u.__h.push(i))}function s(n){return o=5,d(function(){return{current:n}},[])}function _(n,t,u){o=6,h(function(){\"function\"==typeof n?n(t()):n&&(n.current=t())},null==u?u:u.concat(n))}function d(n,u){var r=m(t++,7);return k(r.__H,u)&&(r.__=n(),r.__H=u,r.__h=n),r.__}function A(n,t){return o=8,d(function(){return n},t)}function F(n){var r=u.context[n.__c],o=m(t++,9);return o.__c=n,r?(null==o.__&&(o.__=!0,r.sub(u)),r.props.value):n.__}function T(t,u){n.useDebugValue&&n.useDebugValue(u?u(t):t)}function q(n){var r=m(t++,10),o=l();return r.__=n,u.componentDidCatch||(u.componentDidCatch=function(n){r.__&&r.__(n),o[1](n)}),[o[0],function(){o[1](void 0)}]}function x(){i.forEach(function(t){if(t.__P)try{t.__H.__h.forEach(g),t.__H.__h.forEach(j),t.__H.__h=[]}catch(u){t.__H.__h=[],n.__e(u,t.__v)}}),i=[]}n.__b=function(n){u=null,c&&c(n)},n.__r=function(n){f&&f(n),t=0;var r=(u=n.__c).__H;r&&(r.__h.forEach(g),r.__h.forEach(j),r.__h=[])},n.diffed=function(t){e&&e(t);var o=t.__c;o&&o.__H&&o.__H.__h.length&&(1!==i.push(o)&&r===n.requestAnimationFrame||((r=n.requestAnimationFrame)||function(n){var t,u=function(){clearTimeout(r),b&&cancelAnimationFrame(t),setTimeout(n)},r=setTimeout(u,100);b&&(t=requestAnimationFrame(u))})(x)),u=void 0},n.__c=function(t,u){u.some(function(t){try{t.__h.forEach(g),t.__h=t.__h.filter(function(n){return!n.__||j(n)})}catch(r){u.some(function(n){n.__h&&(n.__h=[])}),u=[],n.__e(r,t.__v)}}),a&&a(t,u)},n.unmount=function(t){v&&v(t);var u=t.__c;if(u&&u.__H)try{u.__H.__.forEach(g)}catch(t){n.__e(t,u.__v)}};var b=\"function\"==typeof requestAnimationFrame;function g(n){var t=u;\"function\"==typeof n.__c&&n.__c(),u=t}function j(n){var t=u;n.__c=n.__(),u=t}function k(n,t){return!n||n.length!==t.length||t.some(function(t,u){return t!==n[u]})}function w(n,t){return\"function\"==typeof t?t(n):t}export{l as useState,p as useReducer,y as useEffect,h as useLayoutEffect,s as useRef,_ as useImperativeHandle,d as useMemo,A as useCallback,F as useContext,T as useDebugValue,q as useErrorBoundary};\n//# sourceMappingURL=hooks.module.js.map\n", "import { ComponentChild, h, JSX } from 'preact';\n\nimport Cell from '../../cell';\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { CSSDeclaration, TColumn } from '../../types';\nimport Row from '../../row';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { PluginRenderer } from '../../plugin';\n\nexport interface TDProps\n  extends BaseProps,\n    JSX.HTMLAttributes<HTMLTableCellElement> {\n  cell: Cell;\n  row?: Row;\n  column?: TColumn;\n  style?: CSSDeclaration;\n  messageCell?: boolean;\n}\n\nexport class TD extends BaseComponent<TDProps> {\n  private content(): ComponentChild {\n    if (\n      this.props.column &&\n      typeof this.props.column.formatter === 'function'\n    ) {\n      return this.props.column.formatter(\n        this.props.cell.data,\n        this.props.row,\n        this.props.column,\n      );\n    }\n\n    if (this.props.column && this.props.column.plugin) {\n      return (\n        <PluginRenderer\n          pluginId={this.props.column.id}\n          props={{\n            column: this.props.column,\n            cell: this.props.cell,\n            row: this.props.row,\n          }}\n        />\n      );\n    }\n\n    return this.props.cell.data;\n  }\n\n  private handleClick(e: JSX.TargetedMouseEvent<HTMLTableCellElement>): void {\n    if (this.props.messageCell) return;\n    this.config.eventEmitter.emit(\n      'cellClick',\n      e,\n      this.props.cell,\n      this.props.column,\n      this.props.row,\n    );\n  }\n\n  private getCustomAttributes(\n    column: TColumn | null,\n  ): JSXInternal.HTMLAttributes<HTMLTableCellElement> {\n    if (!column) return {};\n\n    if (typeof column.attributes === 'function') {\n      return column.attributes(\n        this.props.cell.data,\n        this.props.row,\n        this.props.column,\n      );\n    } else {\n      return column.attributes;\n    }\n  }\n\n  render() {\n    return (\n      <td\n        role={this.props.role}\n        colSpan={this.props.colSpan}\n        data-column-id={this.props.column && this.props.column.id}\n        className={classJoin(\n          className('td'),\n          this.props.className,\n          this.config.className.td,\n        )}\n        style={{\n          ...this.props.style,\n          ...this.config.style.td,\n        }}\n        onClick={this.handleClick.bind(this)}\n        {...this.getCustomAttributes(this.props.column)}\n      >\n        {this.content()}\n      </td>\n    );\n  }\n}\n", "import { h, JSX, Fragment, ComponentChildren } from 'preact';\n\nimport Row from '../../row';\nimport Cell from '../../cell';\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { TColumn } from '../../types';\nimport { TD } from './td';\nimport Header from '../../header';\n\nexport interface TRProps extends BaseProps {\n  row?: Row;\n  header?: Header;\n  messageRow?: boolean;\n}\n\nexport class TR extends BaseComponent<TRProps> {\n  private getColumn(cellIndex: number): TColumn {\n    if (this.props.header) {\n      const cols = Header.leafColumns(this.props.header.columns);\n\n      if (cols) {\n        return cols[cellIndex];\n      }\n    }\n\n    return null;\n  }\n\n  private handleClick(e: JSX.TargetedMouseEvent<HTMLTableRowElement>): void {\n    if (this.props.messageRow) return;\n    this.config.eventEmitter.emit('rowClick', e, this.props.row);\n  }\n\n  private getChildren(): ComponentChildren {\n    if (this.props.children) {\n      return this.props.children;\n    } else {\n      return (\n        <Fragment>\n          {this.props.row.cells.map((cell: Cell, i) => {\n            const column = this.getColumn(i);\n\n            if (column && column.hidden) return null;\n\n            return (\n              <TD\n                key={cell.id}\n                cell={cell}\n                row={this.props.row}\n                column={column}\n              />\n            );\n          })}\n        </Fragment>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <tr\n        className={classJoin(className('tr'), this.config.className.tr)}\n        onClick={this.handleClick.bind(this)}\n      >\n        {this.getChildren()}\n      </tr>\n    );\n  }\n}\n", "import { h } from 'preact';\n\nimport Cell from '../../cell';\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { TR } from './tr';\nimport { TD } from './td';\n\nexport interface MessageRowProps extends BaseProps {\n  message: string;\n  colSpan?: number;\n  className?: string;\n}\n\nexport class MessageRow extends BaseComponent<MessageRowProps> {\n  render() {\n    return (\n      <TR messageRow={true}>\n        <TD\n          role=\"alert\"\n          colSpan={this.props.colSpan}\n          messageCell={true}\n          cell={new Cell(this.props.message)}\n          className={classJoin(\n            className('message'),\n            this.props.className ? this.props.className : null,\n          )}\n        />\n      </TR>\n    );\n  }\n}\n", "import { h } from 'preact';\n\nimport Row from '../../row';\nimport { TR } from './tr';\nimport Tabular from '../../tabular';\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { Status } from '../../types';\nimport Header from '../../header';\nimport { MessageRow } from './messageRow';\n\ninterface TBodyProps extends BaseProps {\n  data: Tabular;\n  status: Status;\n  header?: Header;\n}\n\nexport class TBody extends BaseComponent<TBodyProps> {\n  private headerLength(): number {\n    if (this.props.header) {\n      return this.props.header.visibleColumns.length;\n    }\n    return 0;\n  }\n\n  render() {\n    return (\n      <tbody\n        className={classJoin(className('tbody'), this.config.className.tbody)}\n      >\n        {this.props.data &&\n          this.props.data.rows.map((row: Row) => {\n            return <TR key={row.id} row={row} header={this.props.header} />;\n          })}\n\n        {this.props.status === Status.Loading &&\n          (!this.props.data || this.props.data.length === 0) && (\n            <MessageRow\n              message={this._('loading')}\n              colSpan={this.headerLength()}\n              className={classJoin(\n                className('loading'),\n                this.config.className.loading,\n              )}\n            />\n          )}\n\n        {this.props.status === Status.Rendered &&\n          this.props.data &&\n          this.props.data.length === 0 && (\n            <MessageRow\n              message={this._('noRecordsFound')}\n              colSpan={this.headerLength()}\n              className={classJoin(\n                className('notfound'),\n                this.config.className.notfound,\n              )}\n            />\n          )}\n\n        {this.props.status === Status.Error && (\n          <MessageRow\n            message={this._('error')}\n            colSpan={this.headerLength()}\n            className={classJoin(\n              className('error'),\n              this.config.className.error,\n            )}\n          />\n        )}\n      </tbody>\n    );\n  }\n}\n", "import { Comparator, TCell } from '../../types';\nimport Tabular from '../../tabular';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport Row from '../../row';\nimport log from '../../util/log';\n\ninterface NativeSortProps extends PipelineProcessorProps {\n  columns: {\n    index: number;\n    // 1 ascending, -1 descending\n    direction?: 1 | -1;\n    compare?: Comparator<TCell>;\n  }[];\n}\n\nclass NativeSort extends PipelineProcessor<Tabular, NativeSortProps> {\n  protected validateProps(): void {\n    for (const condition of this.props.columns) {\n      if (condition.direction === undefined) {\n        condition.direction = 1;\n      }\n\n      if (condition.direction !== 1 && condition.direction !== -1) {\n        log.error(`Invalid sort direction ${condition.direction}`);\n      }\n    }\n  }\n\n  get type(): ProcessorType {\n    return ProcessorType.Sort;\n  }\n\n  private compare(cellA: TCell, cellB: TCell): number {\n    if (cellA > cellB) {\n      return 1;\n    } else if (cellA < cellB) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  private compareWrapper(a: Row, b: Row): number {\n    let cmp = 0;\n\n    for (const column of this.props.columns) {\n      if (cmp === 0) {\n        const cellA = a.cells[column.index].data;\n        const cellB = b.cells[column.index].data;\n\n        if (typeof column.compare === 'function') {\n          cmp |= column.compare(cellA, cellB) * column.direction;\n        } else {\n          cmp |= this.compare(cellA, cellB) * column.direction;\n        }\n      } else {\n        break;\n      }\n    }\n\n    return cmp;\n  }\n\n  protected _process(data: Tabular): Tabular {\n    const sortedRows = [...data.rows];\n    sortedRows.sort(this.compareWrapper.bind(this));\n\n    const sorted = new Tabular(sortedRows);\n    // we have to set the tabular length manually\n    // because of the server-side storage\n    sorted.length = data.length;\n\n    return sorted;\n  }\n}\n\nexport default NativeSort;\n", "import BaseStore from '../../base/store';\nimport { SortActionsType } from './actions';\nimport { Comparator, TCell } from '../../../types';\n\nexport type SortStoreState = {\n  index: number;\n  direction: 1 | -1;\n  compare?: Comparator<TCell>;\n}[];\n\nexport class SortStore extends BaseStore<SortStoreState, SortActionsType> {\n  getInitialState(): SortStoreState {\n    return [];\n  }\n\n  handle(type, payload): void {\n    if (type === 'SORT_COLUMN') {\n      const { index, direction, multi, compare } = payload;\n      this.sortColumn(index, direction, multi, compare);\n    } else if (type === 'SORT_COLUMN_TOGGLE') {\n      const { index, multi, compare } = payload;\n      this.sortToggle(index, multi, compare);\n    }\n  }\n\n  private sortToggle(\n    index: number,\n    multi: boolean,\n    compare: Comparator<TCell>,\n  ): void {\n    const columns = [...this.state];\n    const column = columns.find((x) => x.index === index);\n\n    if (!column) {\n      this.sortColumn(index, 1, multi, compare);\n    } else {\n      this.sortColumn(index, column.direction === 1 ? -1 : 1, multi, compare);\n    }\n  }\n\n  private sortColumn(\n    index: number,\n    direction: 1 | -1,\n    multi: boolean,\n    compare: Comparator<TCell>,\n  ): void {\n    let columns = [...this.state];\n    const count = columns.length;\n    const column = columns.find((x) => x.index === index);\n    const exists = column !== undefined;\n\n    let add = false;\n    let reset = false;\n    let remove = false;\n    let update = false;\n\n    if (!exists) {\n      // the column has not been sorted\n      if (count === 0) {\n        // the first column to be sorted\n        add = true;\n      } else if (count > 0 && !multi) {\n        // remove the previously sorted column\n        // and sort the current column\n        add = true;\n        reset = true;\n      } else if (count > 0 && multi) {\n        // multi-sorting\n        // sort this column as well\n        add = true;\n      }\n    } else {\n      // the column has been sorted before\n      if (!multi) {\n        // single column sorting\n        if (count === 1) {\n          update = true;\n        } else if (count > 1) {\n          // this situation happens when we have already entered\n          // multi-sorting mode but then user tries to sort a single column\n          reset = true;\n          add = true;\n        }\n      } else {\n        // multi sorting\n        if (column.direction === -1) {\n          // remove the current column from the\n          // sorted columns array\n          remove = true;\n        } else {\n          update = true;\n        }\n      }\n    }\n\n    if (reset) {\n      // resetting the sorted columns\n      columns = [];\n    }\n\n    if (add) {\n      columns.push({\n        index: index,\n        direction: direction,\n        compare: compare,\n      });\n    } else if (update) {\n      const index = columns.indexOf(column);\n      columns[index].direction = direction;\n    } else if (remove) {\n      const index = columns.indexOf(column);\n      columns.splice(index, 1);\n    }\n\n    this.setState(columns);\n  }\n}\n", "import { BaseActions } from '../../base/actions';\nimport { Comparator, TCell } from '../../../types';\n\nexport interface SortActionsType {\n  SORT_COLUMN: {\n    index: number;\n    direction: 1 | -1;\n    multi?: boolean;\n    compare?: Comparator<TCell>;\n  };\n\n  SORT_COLUMN_TOGGLE: {\n    index: number;\n    multi?: boolean;\n    compare?: Comparator<TCell>;\n  };\n}\n\nexport class SortActions extends BaseActions<SortActionsType> {\n  sortColumn(\n    index: number,\n    direction: 1 | -1,\n    multi?: boolean,\n    compare?: Comparator<TCell>,\n  ): void {\n    this.dispatch('SORT_COLUMN', {\n      index: index,\n      direction: direction,\n      multi: multi,\n      compare: compare,\n    });\n  }\n\n  sortToggle(\n    index: number,\n    multi?: boolean,\n    compare?: Comparator<TCell>,\n  ): void {\n    this.dispatch('SORT_COLUMN_TOGGLE', {\n      index: index,\n      multi: multi,\n      compare: compare,\n    });\n  }\n}\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\nimport { TColumnSort } from '../../types';\n\ninterface ServerSortProps extends PipelineProcessorProps {\n  columns: TColumnSort[];\n  url?: (prevUrl: string, columns: TColumnSort[]) => string;\n  body?: (prevBody: BodyInit, columns: TColumnSort[]) => BodyInit;\n}\n\nclass ServerSort extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerSortProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.ServerSort;\n  }\n\n  _process(options?: ServerStorageOptions): ServerStorageOptions {\n    const updates = {};\n\n    if (this.props.url) {\n      updates['url'] = this.props.url(options.url, this.props.columns);\n    }\n\n    if (this.props.body) {\n      updates['body'] = this.props.body(options.body, this.props.columns);\n    }\n\n    return {\n      ...options,\n      ...updates,\n    };\n  }\n}\n\nexport default ServerSort;\n", "import { h, JSX } from 'preact';\n\nimport { BaseComponent, BaseProps } from '../../base';\nimport { classJoin, className } from '../../../util/className';\nimport { ProcessorType } from '../../../pipeline/processor';\nimport NativeSort from '../../../pipeline/sort/native';\nimport { SortStore, SortStoreState } from './store';\nimport { Comparator, TCell, TColumnSort } from '../../../types';\nimport { SortActions } from './actions';\nimport ServerSort from '../../../pipeline/sort/server';\n\n// column specific config\nexport interface SortConfig {\n  enabled?: boolean;\n  compare?: Comparator<TCell>;\n}\n\n// generic sort config:\n//\n// Config {\n//    sort: GenericSortConfig\n// }\n//\nexport interface GenericSortConfig {\n  multiColumn?: boolean;\n  server?: {\n    url?: (prevUrl: string, columns: TColumnSort[]) => string;\n    body?: (prevBody: BodyInit, columns: TColumnSort[]) => BodyInit;\n  };\n}\n\nexport interface SortProps extends BaseProps {\n  // column index\n  index: number;\n}\n\ninterface SortState {\n  direction: 1 | -1 | 0;\n}\n\nexport class Sort extends BaseComponent<SortProps & SortConfig, SortState> {\n  private readonly sortProcessor: NativeSort | ServerSort;\n  private readonly actions: SortActions;\n  private readonly store: SortStore;\n  private readonly updateStateFn: (...args) => void;\n  private updateSortProcessorFn: (sortedColumns: SortStoreState) => void;\n\n  constructor(props: SortProps & SortConfig, context) {\n    super(props, context);\n\n    this.actions = new SortActions(this.config.dispatcher);\n    this.store = new SortStore(this.config.dispatcher);\n\n    if (props.enabled) {\n      this.sortProcessor = this.getOrCreateSortProcessor();\n      this.updateStateFn = this.updateState.bind(this);\n      this.store.on('updated', this.updateStateFn);\n      this.state = { direction: 0 };\n    }\n  }\n\n  componentWillUnmount(): void {\n    this.config.pipeline.unregister(this.sortProcessor);\n\n    this.store.off('updated', this.updateStateFn);\n    if (this.updateSortProcessorFn)\n      this.store.off('updated', this.updateSortProcessorFn);\n  }\n\n  /**\n   * Sets the internal state of component\n   */\n  private updateState(): void {\n    const currentColumn = this.store.state.find(\n      (x) => x.index === this.props.index,\n    );\n\n    if (!currentColumn) {\n      this.setState({\n        direction: 0,\n      });\n    } else {\n      this.setState({\n        direction: currentColumn.direction,\n      });\n    }\n  }\n\n  private updateSortProcessor(sortedColumns: SortStoreState) {\n    // updates the Sorting processor\n    this.sortProcessor.setProps({\n      columns: sortedColumns,\n    });\n  }\n\n  private getOrCreateSortProcessor(): NativeSort {\n    let processorType = ProcessorType.Sort;\n\n    if (this.config.sort && typeof this.config.sort.server === 'object') {\n      processorType = ProcessorType.ServerSort;\n    }\n\n    const processors = this.config.pipeline.getStepsByType(processorType);\n\n    // my assumption is that we only have ONE sorting processor in the\n    // entire pipeline and that's why I'm displaying a warning here\n    let processor;\n\n    // A sort process is already registered\n    if (processors.length > 0) {\n      processor = processors[0];\n    } else {\n      // let's create a new sort processor\n\n      // this event listener is here because\n      // we want to subscribe to the sort store only once\n      this.updateSortProcessorFn = this.updateSortProcessor.bind(this);\n      this.store.on('updated', this.updateSortProcessorFn);\n\n      if (processorType === ProcessorType.ServerSort) {\n        processor = new ServerSort({\n          columns: this.store.state,\n          ...this.config.sort.server,\n        });\n      } else {\n        processor = new NativeSort({\n          columns: this.store.state,\n        });\n      }\n\n      this.config.pipeline.register(processor);\n    }\n\n    return processor;\n  }\n\n  changeDirection(e: JSX.TargetedMouseEvent<HTMLButtonElement>): void {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // to sort two or more columns at the same time\n    this.actions.sortToggle(\n      this.props.index,\n      e.shiftKey === true && this.config.sort.multiColumn,\n      this.props.compare,\n    );\n  }\n\n  render() {\n    if (!this.props.enabled) {\n      return null;\n    }\n\n    const direction = this.state.direction;\n    let sortClassName = 'neutral';\n\n    if (direction === 1) {\n      sortClassName = 'asc';\n    } else if (direction === -1) {\n      sortClassName = 'desc';\n    }\n\n    return (\n      <button\n        // because the corresponding <th> has tabIndex=0\n        tabIndex={-1}\n        aria-label={this._(`sort.sort${direction === 1 ? 'Desc' : 'Asc'}`)}\n        title={this._(`sort.sort${direction === 1 ? 'Desc' : 'Asc'}`)}\n        className={classJoin(\n          className('sort'),\n          className('sort', sortClassName),\n          this.config.className.sort,\n        )}\n        onClick={this.changeDirection.bind(this)}\n      />\n    );\n  }\n}\n", "import { h, RefObject } from 'preact';\nimport { classJoin, className } from '../../../util/className';\nimport { BaseComponent } from '../../base';\nimport { TColumn } from '../../../types';\nimport { TH } from '../../table/th';\nimport { throttle } from '../../../util/throttle';\n\ntype ResizeProps = {\n  column: TColumn;\n  thRef: RefObject<TH>;\n};\n\ntype ResizeState = {\n  width: string;\n  offsetStart: number;\n};\n\nexport class Resize extends BaseComponent<ResizeProps, ResizeState> {\n  private moveFn: (e) => void;\n  private upFn: (e) => void;\n\n  private getPageX(e: MouseEvent | TouchEvent): number {\n    if (e instanceof MouseEvent) {\n      return Math.floor(e.pageX);\n    } else {\n      return Math.floor(e.changedTouches[0].pageX);\n    }\n  }\n\n  private start(e: MouseEvent | TouchEvent): void {\n    e.stopPropagation();\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const thElement: HTMLElement = this.props.thRef.current;\n\n    this.setState({\n      offsetStart: parseInt(thElement.style.width, 10) - this.getPageX(e),\n    });\n\n    this.upFn = this.end.bind(this);\n    this.moveFn = throttle(this.move.bind(this), 10);\n\n    document.addEventListener('mouseup', this.upFn);\n    document.addEventListener('touchend', this.upFn);\n    document.addEventListener('mousemove', this.moveFn);\n    document.addEventListener('touchmove', this.moveFn);\n  }\n\n  private move(e: MouseEvent | TouchEvent): void {\n    e.stopPropagation();\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const thElement: HTMLElement = this.props.thRef.current;\n\n    if (\n      this.state.offsetStart + this.getPageX(e) >=\n      parseInt(thElement.style.minWidth, 10)\n    ) {\n      thElement.style.width = `${this.state.offsetStart + this.getPageX(e)}px`;\n    }\n  }\n\n  private end(e: MouseEvent | TouchEvent): void {\n    e.stopPropagation();\n\n    document.removeEventListener('mouseup', this.upFn);\n    document.removeEventListener('mousemove', this.moveFn);\n    document.removeEventListener('touchmove', this.moveFn);\n    document.removeEventListener('touchend', this.upFn);\n  }\n\n  render() {\n    return (\n      <div\n        className={classJoin(className('th'), className('resizable'))}\n        onMouseDown={this.start.bind(this)}\n        onTouchStart={this.start.bind(this)}\n        onClick={(e) => e.stopPropagation()}\n      />\n    );\n  }\n}\n", "export const throttle = (fn: (...args) => void, wait = 100) => {\n  let inThrottle: boolean;\n  let lastFn: ReturnType<typeof setTimeout>;\n  let lastTime: number;\n\n  return (...args) => {\n    if (!inThrottle) {\n      fn(...args);\n      lastTime = Date.now();\n      inThrottle = true;\n    } else {\n      clearTimeout(lastFn);\n      lastFn = setTimeout(() => {\n        if (Date.now() - lastTime >= wait) {\n          fn(...args);\n          lastTime = Date.now();\n        }\n      }, Math.max(wait - (Date.now() - lastTime), 0));\n    }\n  };\n};\n", "import { ComponentChild, createRef, h, JSX } from 'preact';\n\nimport { BaseComponent, BaseProps } from '../base';\nimport { classJoin, className } from '../../util/className';\nimport { CSSDeclaration, TColumn } from '../../types';\nimport { Sort } from '../plugin/sort/sort';\nimport { PluginRenderer } from '../../plugin';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { Resize } from '../plugin/resize/resize';\n\nexport interface THProps\n  extends BaseProps,\n    JSX.HTMLAttributes<HTMLTableCellElement> {\n  index: number;\n  column: TColumn;\n  style?: CSSDeclaration;\n}\n\nexport interface THState {\n  style: CSSDeclaration;\n}\n\nexport class TH extends BaseComponent<THProps, THState> {\n  private sortRef = createRef();\n  private thRef = createRef();\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      style: {},\n    };\n  }\n\n  private isSortable(): boolean {\n    return this.props.column.sort.enabled;\n  }\n\n  private isResizable(): boolean {\n    return this.props.column.resizable;\n  }\n\n  private onClick(e: JSX.TargetedMouseEvent<HTMLInputElement>): void {\n    e.stopPropagation();\n\n    if (this.isSortable()) {\n      this.sortRef.current.changeDirection(e);\n    }\n  }\n\n  private keyDown(e: JSX.TargetedMouseEvent<HTMLInputElement>): void {\n    if (this.isSortable() && e.which === 13) {\n      this.onClick(e);\n    }\n  }\n\n  componentDidMount(): void {\n    setTimeout(() => {\n      // sets the `top` style if the current TH is fixed\n      if (this.props.column.fixedHeader && this.thRef.current) {\n        const offsetTop = this.thRef.current.offsetTop;\n\n        if (typeof offsetTop === 'number') {\n          this.setState({\n            style: {\n              top: offsetTop,\n            },\n          });\n        }\n      }\n    }, 0);\n  }\n\n  private content(): ComponentChild {\n    if (this.props.column.name !== undefined) {\n      return this.props.column.name;\n    }\n\n    if (this.props.column.plugin !== undefined) {\n      return (\n        <PluginRenderer\n          pluginId={this.props.column.plugin.id}\n          props={{\n            column: this.props.column,\n          }}\n        />\n      );\n    }\n\n    return null;\n  }\n\n  private getCustomAttributes(): JSXInternal.HTMLAttributes<HTMLTableCellElement> {\n    const column = this.props.column;\n\n    if (!column) return {};\n\n    if (typeof column.attributes === 'function') {\n      return column.attributes(null, null, this.props.column);\n    } else {\n      return column.attributes;\n    }\n  }\n\n  render() {\n    const props = {};\n\n    if (this.isSortable()) {\n      props['tabIndex'] = 0;\n    }\n\n    return (\n      <th\n        ref={this.thRef}\n        data-column-id={this.props.column && this.props.column.id}\n        className={classJoin(\n          className('th'),\n          this.isSortable() ? className('th', 'sort') : null,\n          this.props.column.fixedHeader ? className('th', 'fixed') : null,\n          this.config.className.th,\n        )}\n        onClick={this.onClick.bind(this)}\n        style={{\n          ...this.config.style.th,\n          ...{\n            minWidth: this.props.column.minWidth,\n            width: this.props.column.width,\n          },\n          ...this.state.style,\n          ...this.props.style,\n        }}\n        onKeyDown={this.keyDown.bind(this)}\n        rowSpan={this.props.rowSpan > 1 ? this.props.rowSpan : undefined}\n        colSpan={this.props.colSpan > 1 ? this.props.colSpan : undefined}\n        {...this.getCustomAttributes()}\n        {...props}\n      >\n        <div className={className('th', 'content')}>{this.content()}</div>\n        {this.isSortable() && (\n          <Sort\n            ref={this.sortRef}\n            index={this.props.index}\n            {...this.props.column.sort}\n          />\n        )}\n        {this.isResizable() &&\n          this.props.index < this.config.header.visibleColumns.length - 1 && (\n            <Resize column={this.props.column} thRef={this.thRef} />\n          )}\n      </th>\n    );\n  }\n}\n", "import { ComponentChild, h } from 'preact';\n\nimport { TR } from './tr';\nimport { BaseComponent, BaseProps } from '../base';\nimport { TH } from './th';\nimport { classJoin, className } from '../../util/className';\nimport Header from '../../header';\nimport { TColumn } from '../../types';\nimport { calculateRowColSpans } from '../../util/table';\n\ninterface THeadProps extends BaseProps {\n  header: Header;\n}\n\nexport class THead extends BaseComponent<THeadProps> {\n  private renderColumn(\n    column: TColumn,\n    rowIndex: number,\n    columnIndex: number,\n    totalRows: number,\n  ): ComponentChild {\n    const { rowSpan, colSpan } = calculateRowColSpans(\n      column,\n      rowIndex,\n      totalRows,\n    );\n\n    return (\n      <TH\n        column={column}\n        index={columnIndex}\n        colSpan={colSpan}\n        rowSpan={rowSpan}\n      />\n    );\n  }\n\n  private renderRow(\n    row: TColumn[],\n    rowIndex: number,\n    totalRows: number,\n  ): ComponentChild {\n    // because the only sortable columns are leaf columns (not parents)\n    const leafColumns = Header.leafColumns(this.props.header.columns);\n\n    return (\n      <TR>\n        {row.map((col) => {\n          if (col.hidden) return null;\n\n          return this.renderColumn(\n            col,\n            rowIndex,\n            leafColumns.indexOf(col),\n            totalRows,\n          );\n        })}\n      </TR>\n    );\n  }\n\n  private renderRows(): ComponentChild {\n    const rows = Header.tabularFormat(this.props.header.columns);\n\n    return rows.map((row, rowIndex) =>\n      this.renderRow(row, rowIndex, rows.length),\n    );\n  }\n\n  render() {\n    if (this.props.header) {\n      return (\n        <thead\n          key={this.props.header.id}\n          className={classJoin(className('thead'), this.config.className.thead)}\n        >\n          {this.renderRows()}\n        </thead>\n      );\n    }\n\n    return null;\n  }\n}\n", "import { TColumn } from '../types';\nimport Header from '../header';\n\nexport function calculateRowColSpans(\n  column: TColumn,\n  rowIndex: number,\n  totalRows: number,\n): { rowSpan: number; colSpan: number } {\n  const depth = Header.maximumDepth(column);\n  const remainingRows = totalRows - rowIndex;\n  const rowSpan = Math.floor(remainingRows - depth - depth / remainingRows);\n  const colSpan = (column.columns && column.columns.length) || 1;\n\n  return {\n    rowSpan: rowSpan,\n    colSpan: colSpan,\n  };\n}\n", "import { h } from 'preact';\n\nimport Tabular from '../../tabular';\nimport { TBody } from './tbody';\nimport { THead } from './thead';\nimport { BaseComponent, BaseProps } from '../base';\nimport Header from '../../header';\nimport { classJoin, className } from '../../util/className';\nimport { Status } from '../../types';\n\ninterface TableProps extends BaseProps {\n  data: Tabular;\n  status: Status;\n  header?: Header;\n  width: string;\n  height: string;\n}\n\nexport class Table extends BaseComponent<TableProps> {\n  render() {\n    return (\n      <table\n        role=\"grid\"\n        className={classJoin(className('table'), this.config.className.table)}\n        style={{\n          ...this.config.style.table,\n          ...{\n            height: this.props.height,\n          },\n        }}\n      >\n        <THead header={this.props.header} />\n        <TBody\n          data={this.props.data}\n          status={this.props.status}\n          header={this.props.header}\n        />\n      </table>\n    );\n  }\n}\n", "import { createRef, h } from 'preact';\n\nimport { BaseComponent } from './base';\nimport { classJoin, className } from '../util/className';\nimport { PluginPosition, PluginRenderer } from '../plugin';\n\ninterface HeaderContainerState {\n  isActive: boolean;\n}\n\nexport class HeaderContainer extends BaseComponent<\n  Record<string, any>,\n  HeaderContainerState\n> {\n  private headerRef = createRef();\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      isActive: true,\n    };\n  }\n\n  componentDidMount() {\n    if (this.headerRef.current.children.length === 0) {\n      this.setState({\n        isActive: false,\n      });\n    }\n  }\n\n  render() {\n    if (this.state.isActive) {\n      return (\n        <div\n          ref={this.headerRef}\n          className={classJoin(className('head'), this.config.className.header)}\n          style={{ ...this.config.style.header }}\n        >\n          <PluginRenderer position={PluginPosition.Header} />\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n", "import { createRef, h } from 'preact';\n\nimport { BaseComponent } from './base';\nimport { classJoin, className } from '../util/className';\nimport { PluginPosition, PluginRenderer } from '../plugin';\n\ninterface FooterContainerState {\n  isActive: boolean;\n}\n\nexport class FooterContainer extends BaseComponent<\n  Record<string, any>,\n  FooterContainerState\n> {\n  private footerRef = createRef();\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      isActive: true,\n    };\n  }\n\n  componentDidMount() {\n    if (this.footerRef.current.children.length === 0) {\n      this.setState({\n        isActive: false,\n      });\n    }\n  }\n\n  render() {\n    if (this.state.isActive) {\n      return (\n        <div\n          ref={this.footerRef}\n          className={classJoin(\n            className('footer'),\n            this.config.className.footer,\n          )}\n          style={{ ...this.config.style.footer }}\n        >\n          <PluginRenderer position={PluginPosition.Footer} />\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\n", "import { h, createContext, Context } from 'preact';\n\nimport Tabular from '../tabular';\nimport { BaseComponent, BaseProps } from './base';\nimport { classJoin, className } from '../util/className';\nimport { Status } from '../types';\nimport { Table } from './table/table';\nimport { HeaderContainer } from './headerContainer';\nimport { FooterContainer } from './footerContainer';\nimport Pipeline from '../pipeline/pipeline';\nimport Header from '../header';\nimport { Config } from '../config';\nimport log from '../util/log';\nimport { PipelineProcessor } from '../pipeline/processor';\n\ninterface ContainerProps extends BaseProps {\n  config: Config;\n  pipeline: Pipeline<Tabular>;\n  header?: Header;\n  width: string;\n  height: string;\n}\n\ninterface ContainerState {\n  status: Status;\n  header?: Header;\n  data?: Tabular;\n}\n\nexport class Container extends BaseComponent<ContainerProps, ContainerState> {\n  private readonly configContext: Context<Config>;\n  private processPipelineFn: (processor: PipelineProcessor<any, any>) => void;\n\n  constructor(props, context) {\n    super(props, context);\n\n    // global Config context which is passed to all components\n    this.configContext = createContext(null);\n\n    this.state = {\n      status: Status.Loading,\n      header: props.header,\n      data: null,\n    };\n  }\n\n  private async processPipeline() {\n    this.props.config.eventEmitter.emit('beforeLoad');\n\n    this.setState({\n      status: Status.Loading,\n    });\n\n    try {\n      const data = await this.props.pipeline.process();\n      this.setState({\n        data: data,\n        status: Status.Loaded,\n      });\n\n      this.props.config.eventEmitter.emit('load', data);\n    } catch (e) {\n      log.error(e);\n\n      this.setState({\n        status: Status.Error,\n        data: null,\n      });\n    }\n  }\n\n  async componentDidMount() {\n    const config = this.props.config;\n\n    // for the initial load\n    await this.processPipeline();\n\n    if (config.header && this.state.data && this.state.data.length) {\n      // now that we have the data, let's adjust columns width\n      // NOTE: that we only calculate the columns width once\n      this.setState({\n        header: config.header.adjustWidth(config),\n      });\n    }\n\n    this.processPipelineFn = this.processPipeline.bind(this);\n    this.props.pipeline.on('updated', this.processPipelineFn);\n  }\n\n  componentWillUnmount(): void {\n    this.props.pipeline.off('updated', this.processPipelineFn);\n  }\n\n  componentDidUpdate(\n    _: Readonly<ContainerProps>,\n    previousState: Readonly<ContainerState>,\n  ): void {\n    // we can't jump to the Status.Rendered if previous status is not Status.Loaded\n    if (\n      previousState.status != Status.Rendered &&\n      this.state.status == Status.Loaded\n    ) {\n      this.setState({\n        status: Status.Rendered,\n      });\n\n      this.props.config.eventEmitter.emit('ready');\n    }\n  }\n\n  render() {\n    const configContext = this.configContext;\n\n    return (\n      <configContext.Provider value={this.props.config}>\n        <div\n          role=\"complementary\"\n          className={classJoin(\n            'gridjs',\n            className('container'),\n            this.state.status === Status.Loading ? className('loading') : null,\n            this.props.config.className.container,\n          )}\n          style={{\n            ...this.props.config.style.container,\n            ...{\n              width: this.props.width,\n            },\n          }}\n        >\n          {this.state.status === Status.Loading && (\n            <div className={className('loading-bar')} />\n          )}\n\n          <HeaderContainer />\n\n          <div\n            className={className('wrapper')}\n            style={{ height: this.props.height }}\n          >\n            <Table\n              ref={this.props.config.tableRef}\n              data={this.state.data}\n              header={this.state.header}\n              width={this.props.width}\n              height={this.props.height}\n              status={this.state.status}\n            />\n          </div>\n\n          <FooterContainer />\n\n          <div\n            ref={this.props.config.tempRef}\n            id=\"gridjs-temp\"\n            className={className('temp')}\n          />\n        </div>\n      </configContext.Provider>\n    );\n  }\n}\n", "import { Config, UserConfig } from './config';\nimport { h, render, VNode } from 'preact';\nimport { Container } from './view/container';\nimport log from './util/log';\nimport { EventEmitter } from './util/eventEmitter';\nimport { GridEvents } from './events';\nimport { PluginManager } from './plugin';\n\nclass Grid extends EventEmitter<GridEvents> {\n  public config: Config;\n  public plugin: PluginManager;\n\n  constructor(userConfig?: UserConfig) {\n    super();\n    this.config = new Config({ instance: this, eventEmitter: this }).update(\n      userConfig,\n    );\n    this.plugin = this.config.plugin;\n  }\n\n  public updateConfig(userConfig: Partial<UserConfig>): this {\n    this.config.update(userConfig);\n    return this;\n  }\n\n  createElement(): VNode {\n    return h(Container, {\n      config: this.config,\n      pipeline: this.config.pipeline,\n      header: this.config.header,\n      width: this.config.width,\n      height: this.config.height,\n    });\n  }\n\n  /**\n   * Uses the existing container and tries to clear the cache\n   * and re-render the existing Grid.js instance again. This is\n   * useful when a new config is set/updated.\n   *\n   */\n  forceRender(): this {\n    if (!this.config || !this.config.container) {\n      log.error(\n        'Container is empty. Make sure you call render() before forceRender()',\n        true,\n      );\n    }\n\n    // clear the pipeline cache\n    this.config.pipeline.clearCache();\n\n    // TODO: not sure if it's a good idea to render a null element but I couldn't find a better way\n    render(null, this.config.container);\n    render(this.createElement(), this.config.container);\n\n    return this;\n  }\n\n  /**\n   * Mounts the Grid.js instance to the container\n   * and renders the instance\n   *\n   * @param container\n   */\n  render(container: Element): this {\n    if (!container) {\n      log.error('Container element cannot be null', true);\n    }\n\n    if (container.childNodes.length > 0) {\n      log.error(\n        `The container element ${container} is not empty. Make sure the container is empty and call render() again`,\n      );\n      return this;\n    }\n\n    this.config.container = container;\n    render(this.createElement(), container);\n\n    return this;\n  }\n}\n\nexport default Grid;\n"],
  "mappings": "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",
  "names": []
}
