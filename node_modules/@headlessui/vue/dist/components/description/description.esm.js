import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { computed, ref, provide, defineComponent, unref, onMounted, onUnmounted, inject } from 'vue';
import { render } from '../../utils/render.esm.js';
import { useId } from '../../hooks/use-id.esm.js';

var DescriptionContext = /*#__PURE__*/Symbol('DescriptionContext');

function useDescriptionContext() {
  var context = inject(DescriptionContext, null);

  if (context === null) {
    throw new Error('Missing parent');
  }

  return context;
}

function useDescriptions(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$slot = _ref.slot,
      slot = _ref$slot === void 0 ? ref({}) : _ref$slot,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? 'Description' : _ref$name,
      _ref$props = _ref.props,
      props = _ref$props === void 0 ? {} : _ref$props;

  var descriptionIds = ref([]);

  function register(value) {
    descriptionIds.value.push(value);
    return function () {
      var idx = descriptionIds.value.indexOf(value);
      if (idx === -1) return;
      descriptionIds.value.splice(idx, 1);
    };
  }

  provide(DescriptionContext, {
    register: register,
    slot: slot,
    name: name,
    props: props
  }); // The actual id's as string or undefined.

  return computed(function () {
    return descriptionIds.value.length > 0 ? descriptionIds.value.join(' ') : undefined;
  });
} // ---

var Description = /*#__PURE__*/defineComponent({
  name: 'Description',
  props: {
    as: {
      type: [Object, String],
      "default": 'p'
    }
  },
  render: function render$1() {
    var _this$context = this.context,
        _this$context$name = _this$context.name,
        name = _this$context$name === void 0 ? 'Description' : _this$context$name,
        _this$context$slot = _this$context.slot,
        slot = _this$context$slot === void 0 ? ref({}) : _this$context$slot,
        _this$context$props = _this$context.props,
        props = _this$context$props === void 0 ? {} : _this$context$props;
    var passThroughProps = this.$props;

    var propsWeControl = _extends({}, Object.entries(props).reduce(function (acc, _ref2) {
      var _Object$assign;

      var key = _ref2[0],
          value = _ref2[1];
      return Object.assign(acc, (_Object$assign = {}, _Object$assign[key] = unref(value), _Object$assign));
    }, {}), {
      id: this.id
    });

    return render({
      props: _extends({}, passThroughProps, propsWeControl),
      slot: slot.value,
      attrs: this.$attrs,
      slots: this.$slots,
      name: name
    });
  },
  setup: function setup() {
    var context = useDescriptionContext();
    var id = "headlessui-description-" + useId();
    onMounted(function () {
      return onUnmounted(context.register(id));
    });
    return {
      id: id,
      context: context
    };
  }
});

export { Description, useDescriptions };
//# sourceMappingURL=description.esm.js.map
