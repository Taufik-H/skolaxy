import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { defineComponent, ref, provide, inject, computed } from 'vue';
import { render } from '../../utils/render.esm.js';
import { Keys } from '../../keyboard.esm.js';
import { useId } from '../../hooks/use-id.esm.js';
import { useDescriptions, Description } from '../description/description.esm.js';
import { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';
import { useLabels, Label } from '../label/label.esm.js';

var GroupContext = /*#__PURE__*/Symbol('GroupContext'); // ---

var SwitchGroup = /*#__PURE__*/defineComponent({
  name: 'SwitchGroup',
  props: {
    as: {
      type: [Object, String],
      "default": 'template'
    }
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots,
        attrs = _ref.attrs;
    var switchRef = ref(null);
    var labelledby = useLabels({
      name: 'SwitchLabel',
      props: {
        onClick: function onClick() {
          if (!switchRef.value) return;
          switchRef.value.click();
          switchRef.value.focus({
            preventScroll: true
          });
        }
      }
    });
    var describedby = useDescriptions({
      name: 'SwitchDescription'
    });
    var api = {
      switchRef: switchRef,
      labelledby: labelledby,
      describedby: describedby
    };
    provide(GroupContext, api);
    return function () {
      return render({
        props: props,
        slot: {},
        slots: slots,
        attrs: attrs,
        name: 'SwitchGroup'
      });
    };
  }
}); // ---

var Switch = /*#__PURE__*/defineComponent({
  name: 'Switch',
  emits: {
    'update:modelValue': function updateModelValue(_value) {
      return true;
    }
  },
  props: {
    as: {
      type: [Object, String],
      "default": 'button'
    },
    modelValue: {
      type: Boolean,
      "default": false
    }
  },
  render: function render$1() {
    var slot = {
      checked: this.$props.modelValue
    };
    var propsWeControl = {
      id: this.id,
      ref: 'el',
      role: 'switch',
      type: this.type,
      tabIndex: 0,
      'aria-checked': this.$props.modelValue,
      'aria-labelledby': this.labelledby,
      'aria-describedby': this.describedby,
      onClick: this.handleClick,
      onKeyup: this.handleKeyUp,
      onKeypress: this.handleKeyPress
    };
    return render({
      props: _extends({}, this.$props, propsWeControl),
      slot: slot,
      attrs: this.$attrs,
      slots: this.$slots,
      name: 'Switch'
    });
  },
  setup: function setup(props, _ref2) {
    var emit = _ref2.emit,
        attrs = _ref2.attrs;
    var api = inject(GroupContext, null);
    var id = "headlessui-switch-" + useId();

    function toggle() {
      emit('update:modelValue', !props.modelValue);
    }

    var internalSwitchRef = ref(null);
    var switchRef = api === null ? internalSwitchRef : api.switchRef;
    return {
      id: id,
      el: switchRef,
      type: useResolveButtonType(computed(function () {
        return {
          as: props.as,
          type: attrs.type
        };
      }), switchRef),
      labelledby: api == null ? void 0 : api.labelledby,
      describedby: api == null ? void 0 : api.describedby,
      handleClick: function handleClick(event) {
        event.preventDefault();
        toggle();
      },
      handleKeyUp: function handleKeyUp(event) {
        if (event.key !== Keys.Tab) event.preventDefault();
        if (event.key === Keys.Space) toggle();
      },
      // This is needed so that we can "cancel" the click event when we use the `Enter` key on a button.
      handleKeyPress: function handleKeyPress(event) {
        event.preventDefault();
      }
    };
  }
}); // ---

var SwitchLabel = Label;
var SwitchDescription = Description;

export { Switch, SwitchDescription, SwitchGroup, SwitchLabel };
//# sourceMappingURL=switch.esm.js.map
