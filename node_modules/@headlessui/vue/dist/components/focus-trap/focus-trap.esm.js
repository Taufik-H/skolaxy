import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { defineComponent, ref, computed, onMounted, onUnmounted } from 'vue';
import { render } from '../../utils/render.esm.js';
import { useFocusTrap } from '../../hooks/use-focus-trap.esm.js';

var FocusTrap = /*#__PURE__*/defineComponent({
  name: 'FocusTrap',
  props: {
    as: {
      type: [Object, String],
      "default": 'div'
    },
    initialFocus: {
      type: Object,
      "default": null
    }
  },
  render: function render$1() {
    var slot = {};
    var propsWeControl = {
      ref: 'el'
    };

    var _this$$props = this.$props,
        passThroughProps = _objectWithoutPropertiesLoose(_this$$props, ["initialFocus"]);

    return render({
      props: _extends({}, passThroughProps, propsWeControl),
      slot: slot,
      attrs: this.$attrs,
      slots: this.$slots,
      name: 'FocusTrap'
    });
  },
  setup: function setup(props) {
    var containers = ref(new Set());
    var container = ref(null);
    var enabled = ref(true);
    var focusTrapOptions = computed(function () {
      return {
        initialFocus: props.initialFocus
      };
    });
    onMounted(function () {
      if (!container.value) return;
      containers.value.add(container.value);
      useFocusTrap(containers, enabled, focusTrapOptions);
    });
    onUnmounted(function () {
      enabled.value = false;
    });
    return {
      el: container
    };
  }
});

export { FocusTrap };
//# sourceMappingURL=focus-trap.esm.js.map
