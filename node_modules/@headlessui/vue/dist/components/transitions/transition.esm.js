import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { defineComponent, h, inject, ref, computed, onMounted, onUnmounted, watchEffect, watch, provide } from 'vue';
import { match } from '../../utils/match.esm.js';
import { render, RenderStrategy, Features } from '../../utils/render.esm.js';
import { useId } from '../../hooks/use-id.esm.js';
import { dom } from '../../utils/dom.esm.js';
import { hasOpenClosed, useOpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';
import { transition, Reason } from './utils/transition.esm.js';

function splitClasses(classes) {
  if (classes === void 0) {
    classes = '';
  }

  return classes.split(' ').filter(function (className) {
    return className.trim().length > 1;
  });
}

var TransitionContext = /*#__PURE__*/Symbol('TransitionContext');
var TreeStates;

(function (TreeStates) {
  TreeStates["Visible"] = "visible";
  TreeStates["Hidden"] = "hidden";
})(TreeStates || (TreeStates = {}));

function hasTransitionContext() {
  return inject(TransitionContext, null) !== null;
}

function useTransitionContext() {
  var context = inject(TransitionContext, null);

  if (context === null) {
    throw new Error('A <TransitionChild /> is used but it is missing a parent <TransitionRoot />.');
  }

  return context;
}

function useParentNesting() {
  var context = inject(NestingContext, null);

  if (context === null) {
    throw new Error('A <TransitionChild /> is used but it is missing a parent <TransitionRoot />.');
  }

  return context;
}

var NestingContext = /*#__PURE__*/Symbol('NestingContext');

function hasChildren(bag) {
  if ('children' in bag) return hasChildren(bag.children);
  return bag.value.filter(function (_ref) {
    var state = _ref.state;
    return state === TreeStates.Visible;
  }).length > 0;
}

function useNesting(done) {
  var transitionableChildren = ref([]);
  var mounted = ref(false);
  onMounted(function () {
    return mounted.value = true;
  });
  onUnmounted(function () {
    return mounted.value = false;
  });

  function unregister(childId, strategy) {
    var _match;

    if (strategy === void 0) {
      strategy = RenderStrategy.Hidden;
    }

    var idx = transitionableChildren.value.findIndex(function (_ref2) {
      var id = _ref2.id;
      return id === childId;
    });
    if (idx === -1) return;
    match(strategy, (_match = {}, _match[RenderStrategy.Unmount] = function () {
      transitionableChildren.value.splice(idx, 1);
    }, _match[RenderStrategy.Hidden] = function () {
      transitionableChildren.value[idx].state = TreeStates.Hidden;
    }, _match));

    if (!hasChildren(transitionableChildren) && mounted.value) {
      done == null ? void 0 : done();
    }
  }

  function register(childId) {
    var child = transitionableChildren.value.find(function (_ref3) {
      var id = _ref3.id;
      return id === childId;
    });

    if (!child) {
      transitionableChildren.value.push({
        id: childId,
        state: TreeStates.Visible
      });
    } else if (child.state !== TreeStates.Visible) {
      child.state = TreeStates.Visible;
    }

    return function () {
      return unregister(childId, RenderStrategy.Unmount);
    };
  }

  return {
    children: transitionableChildren,
    register: register,
    unregister: unregister
  };
} // ---


var TransitionChildRenderFeatures = Features.RenderStrategy;
var TransitionChild = /*#__PURE__*/defineComponent({
  props: {
    as: {
      type: [Object, String],
      "default": 'div'
    },
    show: {
      type: [Boolean],
      "default": null
    },
    unmount: {
      type: [Boolean],
      "default": true
    },
    appear: {
      type: [Boolean],
      "default": false
    },
    enter: {
      type: [String],
      "default": ''
    },
    enterFrom: {
      type: [String],
      "default": ''
    },
    enterTo: {
      type: [String],
      "default": ''
    },
    entered: {
      type: [String],
      "default": ''
    },
    leave: {
      type: [String],
      "default": ''
    },
    leaveFrom: {
      type: [String],
      "default": ''
    },
    leaveTo: {
      type: [String],
      "default": ''
    }
  },
  emits: {
    beforeEnter: function beforeEnter() {
      return true;
    },
    afterEnter: function afterEnter() {
      return true;
    },
    beforeLeave: function beforeLeave() {
      return true;
    },
    afterLeave: function afterLeave() {
      return true;
    }
  },
  render: function render$1() {
    var _this = this;

    if (this.renderAsRoot) {
      return h(TransitionRoot, _extends({}, this.$props, {
        onBeforeEnter: function onBeforeEnter() {
          return _this.$emit('beforeEnter');
        },
        onAfterEnter: function onAfterEnter() {
          return _this.$emit('afterEnter');
        },
        onBeforeLeave: function onBeforeLeave() {
          return _this.$emit('beforeLeave');
        },
        onAfterLeave: function onAfterLeave() {
          return _this.$emit('afterLeave');
        }
      }), this.$slots);
    }

    var _this$$props = this.$props,
        rest = _objectWithoutPropertiesLoose(_this$$props, ["appear", "show", "enter", "enterFrom", "enterTo", "entered", "leave", "leaveFrom", "leaveTo"]);

    var propsWeControl = {
      ref: 'el'
    };
    var passthroughProps = rest;
    return render({
      props: _extends({}, passthroughProps, propsWeControl),
      slot: {},
      slots: this.$slots,
      attrs: this.$attrs,
      features: TransitionChildRenderFeatures,
      visible: this.state === TreeStates.Visible,
      name: 'TransitionChild'
    });
  },
  setup: function setup(props, _ref4) {
    var emit = _ref4.emit;

    if (!hasTransitionContext() && hasOpenClosed()) {
      return {
        renderAsRoot: true
      };
    }

    var container = ref(null);
    var state = ref(TreeStates.Visible);
    var strategy = computed(function () {
      return props.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden;
    });

    var _useTransitionContext = useTransitionContext(),
        show = _useTransitionContext.show,
        appear = _useTransitionContext.appear;

    var _useParentNesting = useParentNesting(),
        register = _useParentNesting.register,
        unregister = _useParentNesting.unregister;

    var initial = {
      value: true
    };
    var id = useId();
    var isTransitioning = {
      value: false
    };
    var nesting = useNesting(function () {
      // When all children have been unmounted we can only hide ourselves if and only if we are not
      // transitioning ourselves. Otherwise we would unmount before the transitions are finished.
      if (!isTransitioning.value) {
        state.value = TreeStates.Hidden;
        unregister(id);
        emit('afterLeave');
      }
    });
    onMounted(function () {
      var unregister = register(id);
      onUnmounted(unregister);
    });
    watchEffect(function () {
      var _match2;

      // If we are in another mode than the Hidden mode then ignore
      if (strategy.value !== RenderStrategy.Hidden) return;
      if (!id) return; // Make sure that we are visible

      if (show && state.value !== TreeStates.Visible) {
        state.value = TreeStates.Visible;
        return;
      }

      match(state.value, (_match2 = {}, _match2[TreeStates.Hidden] = function () {
        return unregister(id);
      }, _match2[TreeStates.Visible] = function () {
        return register(id);
      }, _match2));
    });
    var enterClasses = splitClasses(props.enter);
    var enterFromClasses = splitClasses(props.enterFrom);
    var enterToClasses = splitClasses(props.enterTo);
    var enteredClasses = splitClasses(props.entered);
    var leaveClasses = splitClasses(props.leave);
    var leaveFromClasses = splitClasses(props.leaveFrom);
    var leaveToClasses = splitClasses(props.leaveTo);
    onMounted(function () {
      watchEffect(function () {
        if (state.value === TreeStates.Visible) {
          var domElement = dom(container); // When you return `null` from a component, the actual DOM reference will
          // be an empty comment... This means that we can never check for the DOM
          // node to be `null`. So instead we check for an empty comment.

          var isEmptyDOMNode = domElement instanceof Comment && domElement.data === '';

          if (isEmptyDOMNode) {
            throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?');
          }
        }
      });
    });

    function executeTransition(onInvalidate) {
      // Skipping initial transition
      var skip = initial.value && !appear.value;
      var node = dom(container);
      if (!node || !(node instanceof HTMLElement)) return;
      if (skip) return;
      isTransitioning.value = true;
      if (show.value) emit('beforeEnter');
      if (!show.value) emit('beforeLeave');
      onInvalidate(show.value ? transition(node, enterClasses, enterFromClasses, enterToClasses, enteredClasses, function (reason) {
        isTransitioning.value = false;
        if (reason === Reason.Finished) emit('afterEnter');
      }) : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, enteredClasses, function (reason) {
        isTransitioning.value = false;
        if (reason !== Reason.Finished) return; // When we don't have children anymore we can safely unregister from the parent and hide
        // ourselves.

        if (!hasChildren(nesting)) {
          state.value = TreeStates.Hidden;
          unregister(id);
          emit('afterLeave');
        }
      }));
    }

    onMounted(function () {
      watch([show, appear], function (_oldValues, _newValues, onInvalidate) {
        executeTransition(onInvalidate);
        initial.value = false;
      }, {
        immediate: true
      });
    });
    provide(NestingContext, nesting);
    useOpenClosedProvider(computed(function () {
      var _match3;

      return match(state.value, (_match3 = {}, _match3[TreeStates.Visible] = State.Open, _match3[TreeStates.Hidden] = State.Closed, _match3));
    }));
    return {
      el: container,
      renderAsRoot: false,
      state: state
    };
  }
}); // ---

var TransitionRoot = /*#__PURE__*/defineComponent({
  inheritAttrs: false,
  props: {
    as: {
      type: [Object, String],
      "default": 'div'
    },
    show: {
      type: [Boolean],
      "default": null
    },
    unmount: {
      type: [Boolean],
      "default": true
    },
    appear: {
      type: [Boolean],
      "default": false
    },
    enter: {
      type: [String],
      "default": ''
    },
    enterFrom: {
      type: [String],
      "default": ''
    },
    enterTo: {
      type: [String],
      "default": ''
    },
    entered: {
      type: [String],
      "default": ''
    },
    leave: {
      type: [String],
      "default": ''
    },
    leaveFrom: {
      type: [String],
      "default": ''
    },
    leaveTo: {
      type: [String],
      "default": ''
    }
  },
  emits: {
    beforeEnter: function beforeEnter() {
      return true;
    },
    afterEnter: function afterEnter() {
      return true;
    },
    beforeLeave: function beforeLeave() {
      return true;
    },
    afterLeave: function afterLeave() {
      return true;
    }
  },
  render: function render$1() {
    var _this2 = this;

    var _this$$props2 = this.$props,
        unmount = _this$$props2.unmount,
        passThroughProps = _objectWithoutPropertiesLoose(_this$$props2, ["show", "appear", "unmount"]);

    var sharedProps = {
      unmount: unmount
    };
    return render({
      props: _extends({}, sharedProps, {
        as: 'template'
      }),
      slot: {},
      slots: _extends({}, this.$slots, {
        "default": function _default() {
          return [h(TransitionChild, _extends({
            onBeforeEnter: function onBeforeEnter() {
              return _this2.$emit('beforeEnter');
            },
            onAfterEnter: function onAfterEnter() {
              return _this2.$emit('afterEnter');
            },
            onBeforeLeave: function onBeforeLeave() {
              return _this2.$emit('beforeLeave');
            },
            onAfterLeave: function onAfterLeave() {
              return _this2.$emit('afterLeave');
            }
          }, _this2.$attrs, sharedProps, passThroughProps), _this2.$slots["default"])];
        }
      }),
      attrs: {},
      features: TransitionChildRenderFeatures,
      visible: this.state === TreeStates.Visible,
      name: 'Transition'
    });
  },
  setup: function setup(props) {
    var usesOpenClosedState = useOpenClosed();
    var show = computed(function () {
      if (props.show === null && usesOpenClosedState !== null) {
        var _match4;

        return match(usesOpenClosedState.value, (_match4 = {}, _match4[State.Open] = true, _match4[State.Closed] = false, _match4));
      }

      return props.show;
    });
    watchEffect(function () {
      if (![true, false].includes(show.value)) {
        throw new Error('A <Transition /> is used but it is missing a `:show="true | false"` prop.');
      }
    });
    var state = ref(show.value ? TreeStates.Visible : TreeStates.Hidden);
    var nestingBag = useNesting(function () {
      state.value = TreeStates.Hidden;
    });
    var initial = {
      value: true
    };
    var transitionBag = {
      show: show,
      appear: computed(function () {
        return props.appear || !initial.value;
      })
    };
    onMounted(function () {
      watchEffect(function () {
        initial.value = false;

        if (show.value) {
          state.value = TreeStates.Visible;
        } else if (!hasChildren(nestingBag)) {
          state.value = TreeStates.Hidden;
        }
      });
    });
    provide(NestingContext, nestingBag);
    provide(TransitionContext, transitionBag);
    return {
      state: state,
      show: show
    };
  }
});

export { TransitionChild, TransitionRoot };
//# sourceMappingURL=transition.esm.js.map
