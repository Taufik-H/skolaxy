import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { defineComponent, ref, computed, provide, onMounted, onUnmounted, inject } from 'vue';
import { match } from '../../utils/match.esm.js';
import { render, omit, Features } from '../../utils/render.esm.js';
import { Keys } from '../../keyboard.esm.js';
import { useId } from '../../hooks/use-id.esm.js';
import { focusIn, Focus } from '../../utils/focus-management.esm.js';
import { dom } from '../../utils/dom.esm.js';
import { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';

var TabsContext = /*#__PURE__*/Symbol('TabsContext');

function useTabsContext(component) {
  var context = inject(TabsContext, null);

  if (context === null) {
    var err = new Error("<" + component + " /> is missing a parent <TabGroup /> component.");
    if (Error.captureStackTrace) Error.captureStackTrace(err, useTabsContext);
    throw err;
  }

  return context;
} // ---


var TabGroup = /*#__PURE__*/defineComponent({
  name: 'TabGroup',
  emits: {
    change: function change(_index) {
      return true;
    }
  },
  props: {
    as: {
      type: [Object, String],
      "default": 'template'
    },
    defaultIndex: {
      type: [Number],
      "default": 0
    },
    vertical: {
      type: [Boolean],
      "default": false
    },
    manual: {
      type: [Boolean],
      "default": false
    }
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots,
        attrs = _ref.attrs,
        emit = _ref.emit;
    var selectedIndex = ref(null);
    var tabs = ref([]);
    var panels = ref([]);
    var api = {
      selectedIndex: selectedIndex,
      orientation: computed(function () {
        return props.vertical ? 'vertical' : 'horizontal';
      }),
      activation: computed(function () {
        return props.manual ? 'manual' : 'auto';
      }),
      tabs: tabs,
      panels: panels,
      setSelectedIndex: function setSelectedIndex(index) {
        if (selectedIndex.value === index) return;
        selectedIndex.value = index;
        emit('change', index);
      },
      registerTab: function registerTab(tab) {
        if (!tabs.value.includes(tab)) tabs.value.push(tab);
      },
      unregisterTab: function unregisterTab(tab) {
        var idx = tabs.value.indexOf(tab);
        if (idx !== -1) tabs.value.slice(idx, 1);
      },
      registerPanel: function registerPanel(panel) {
        if (!panels.value.includes(panel)) panels.value.push(panel);
      },
      unregisterPanel: function unregisterPanel(panel) {
        var idx = panels.value.indexOf(panel);
        if (idx !== -1) panels.value.slice(idx, 1);
      }
    };
    provide(TabsContext, api);
    onMounted(function () {
      if (api.tabs.value.length <= 0) return console.log('bail');
      if (selectedIndex.value !== null) return console.log('bail 2');
      var tabs = api.tabs.value.map(function (tab) {
        return dom(tab);
      }).filter(Boolean);
      var focusableTabs = tabs.filter(function (tab) {
        return !tab.hasAttribute('disabled');
      }); // Underflow

      if (props.defaultIndex < 0) {
        selectedIndex.value = tabs.indexOf(focusableTabs[0]);
      } // Overflow
      else if (props.defaultIndex > api.tabs.value.length) {
          selectedIndex.value = tabs.indexOf(focusableTabs[focusableTabs.length - 1]);
        } // Middle
        else {
            var before = tabs.slice(0, props.defaultIndex);
            var after = tabs.slice(props.defaultIndex);
            var next = [].concat(after, before).find(function (tab) {
              return focusableTabs.includes(tab);
            });
            if (!next) return;
            selectedIndex.value = tabs.indexOf(next);
          }
    });
    return function () {
      var slot = {
        selectedIndex: selectedIndex.value
      };
      return render({
        props: omit(props, ['defaultIndex', 'manual', 'vertical']),
        slot: slot,
        slots: slots,
        attrs: attrs,
        name: 'TabGroup'
      });
    };
  }
}); // ---

var TabList = /*#__PURE__*/defineComponent({
  name: 'TabList',
  props: {
    as: {
      type: [Object, String],
      "default": 'div'
    }
  },
  setup: function setup(props, _ref2) {
    var attrs = _ref2.attrs,
        slots = _ref2.slots;
    var api = useTabsContext('TabList');
    return function () {
      var slot = {
        selectedIndex: api.selectedIndex.value
      };
      var propsWeControl = {
        role: 'tablist',
        'aria-orientation': api.orientation.value
      };
      var passThroughProps = props;
      return render({
        props: _extends({}, passThroughProps, propsWeControl),
        slot: slot,
        attrs: attrs,
        slots: slots,
        name: 'TabList'
      });
    };
  }
}); // ---

var Tab = /*#__PURE__*/defineComponent({
  name: 'Tab',
  props: {
    as: {
      type: [Object, String],
      "default": 'button'
    },
    disabled: {
      type: [Boolean],
      "default": false
    }
  },
  render: function render$1() {
    var _api$panels$value$thi, _api$panels$value$thi2;

    var api = useTabsContext('Tab');
    var slot = {
      selected: this.selected
    };
    var propsWeControl = {
      ref: 'el',
      onKeydown: this.handleKeyDown,
      onFocus: api.activation.value === 'manual' ? this.handleFocus : this.handleSelection,
      onClick: this.handleSelection,
      id: this.id,
      role: 'tab',
      type: this.type,
      'aria-controls': (_api$panels$value$thi = api.panels.value[this.myIndex]) == null ? void 0 : (_api$panels$value$thi2 = _api$panels$value$thi.value) == null ? void 0 : _api$panels$value$thi2.id,
      'aria-selected': this.selected,
      tabIndex: this.selected ? 0 : -1,
      disabled: this.$props.disabled ? true : undefined
    };

    if (process.env.NODE_ENV === 'test') {
      var _Object$assign;

      Object.assign(propsWeControl, (_Object$assign = {}, _Object$assign['data-headlessui-index'] = this.myIndex, _Object$assign));
    }

    return render({
      props: _extends({}, this.$props, propsWeControl),
      slot: slot,
      attrs: this.$attrs,
      slots: this.$slots,
      name: 'Tab'
    });
  },
  setup: function setup(props, _ref3) {
    var attrs = _ref3.attrs;
    var api = useTabsContext('Tab');
    var id = "headlessui-tabs-tab-" + useId();
    var tabRef = ref();
    onMounted(function () {
      return api.registerTab(tabRef);
    });
    onUnmounted(function () {
      return api.unregisterTab(tabRef);
    });
    var myIndex = computed(function () {
      return api.tabs.value.indexOf(tabRef);
    });
    var selected = computed(function () {
      return myIndex.value === api.selectedIndex.value;
    });

    function handleKeyDown(event) {
      var list = api.tabs.value.map(function (tab) {
        return dom(tab);
      }).filter(Boolean);

      if (event.key === Keys.Space || event.key === Keys.Enter) {
        event.preventDefault();
        event.stopPropagation();
        api.setSelectedIndex(myIndex.value);
        return;
      }

      switch (event.key) {
        case Keys.Home:
        case Keys.PageUp:
          event.preventDefault();
          event.stopPropagation();
          return focusIn(list, Focus.First);

        case Keys.End:
        case Keys.PageDown:
          event.preventDefault();
          event.stopPropagation();
          return focusIn(list, Focus.Last);
      }

      return match(api.orientation.value, {
        vertical: function vertical() {
          if (event.key === Keys.ArrowUp) return focusIn(list, Focus.Previous | Focus.WrapAround);
          if (event.key === Keys.ArrowDown) return focusIn(list, Focus.Next | Focus.WrapAround);
          return;
        },
        horizontal: function horizontal() {
          if (event.key === Keys.ArrowLeft) return focusIn(list, Focus.Previous | Focus.WrapAround);
          if (event.key === Keys.ArrowRight) return focusIn(list, Focus.Next | Focus.WrapAround);
          return;
        }
      });
    }

    function handleFocus() {
      var _dom;

      (_dom = dom(tabRef)) == null ? void 0 : _dom.focus();
    }

    function handleSelection() {
      var _dom2;

      if (props.disabled) return;
      (_dom2 = dom(tabRef)) == null ? void 0 : _dom2.focus();
      api.setSelectedIndex(myIndex.value);
    }

    return {
      el: tabRef,
      id: id,
      selected: selected,
      myIndex: myIndex,
      type: useResolveButtonType(computed(function () {
        return {
          as: props.as,
          type: attrs.type
        };
      }), tabRef),
      handleKeyDown: handleKeyDown,
      handleFocus: handleFocus,
      handleSelection: handleSelection
    };
  }
}); // ---

var TabPanels = /*#__PURE__*/defineComponent({
  name: 'TabPanels',
  props: {
    as: {
      type: [Object, String],
      "default": 'div'
    }
  },
  setup: function setup(props, _ref4) {
    var slots = _ref4.slots,
        attrs = _ref4.attrs;
    var api = useTabsContext('TabPanels');
    return function () {
      var slot = {
        selectedIndex: api.selectedIndex.value
      };
      return render({
        props: props,
        slot: slot,
        attrs: attrs,
        slots: slots,
        name: 'TabPanels'
      });
    };
  }
});
var TabPanel = /*#__PURE__*/defineComponent({
  name: 'TabPanel',
  props: {
    as: {
      type: [Object, String],
      "default": 'div'
    },
    "static": {
      type: Boolean,
      "default": false
    },
    unmount: {
      type: Boolean,
      "default": true
    }
  },
  render: function render$1() {
    var _api$tabs$value$this$, _api$tabs$value$this$2;

    var api = useTabsContext('TabPanel');
    var slot = {
      selected: this.selected
    };
    var propsWeControl = {
      ref: 'el',
      id: this.id,
      role: 'tabpanel',
      'aria-labelledby': (_api$tabs$value$this$ = api.tabs.value[this.myIndex]) == null ? void 0 : (_api$tabs$value$this$2 = _api$tabs$value$this$.value) == null ? void 0 : _api$tabs$value$this$2.id,
      tabIndex: this.selected ? 0 : -1
    };

    if (process.env.NODE_ENV === 'test') {
      var _Object$assign2;

      Object.assign(propsWeControl, (_Object$assign2 = {}, _Object$assign2['data-headlessui-index'] = this.myIndex, _Object$assign2));
    }

    return render({
      props: _extends({}, this.$props, propsWeControl),
      slot: slot,
      attrs: this.$attrs,
      slots: this.$slots,
      features: Features.Static | Features.RenderStrategy,
      visible: this.selected,
      name: 'TabPanel'
    });
  },
  setup: function setup() {
    var api = useTabsContext('TabPanel');
    var id = "headlessui-tabs-panel-" + useId();
    var panelRef = ref();
    onMounted(function () {
      return api.registerPanel(panelRef);
    });
    onUnmounted(function () {
      return api.unregisterPanel(panelRef);
    });
    var myIndex = computed(function () {
      return api.panels.value.indexOf(panelRef);
    });
    var selected = computed(function () {
      return myIndex.value === api.selectedIndex.value;
    });
    return {
      id: id,
      el: panelRef,
      selected: selected,
      myIndex: myIndex
    };
  }
});

export { Tab, TabGroup, TabList, TabPanel, TabPanels };
//# sourceMappingURL=tabs.esm.js.map
