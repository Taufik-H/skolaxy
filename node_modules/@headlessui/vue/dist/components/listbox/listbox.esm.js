import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { defineComponent, ref, computed, provide, toRaw, onMounted, onUnmounted, watch, watchEffect, nextTick, inject } from 'vue';
import { match } from '../../utils/match.esm.js';
import { render, omit, Features } from '../../utils/render.esm.js';
import { Keys } from '../../keyboard.esm.js';
import { useId } from '../../hooks/use-id.esm.js';
import { useWindowEvent } from '../../hooks/use-window-event.esm.js';
import { dom } from '../../utils/dom.esm.js';
import { useOpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';
import { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';
import { calculateActiveIndex, Focus } from '../../utils/calculate-active-index.esm.js';

var ListboxStates;

(function (ListboxStates) {
  ListboxStates[ListboxStates["Open"] = 0] = "Open";
  ListboxStates[ListboxStates["Closed"] = 1] = "Closed";
})(ListboxStates || (ListboxStates = {}));

function nextFrame(cb) {
  requestAnimationFrame(function () {
    return requestAnimationFrame(cb);
  });
}

var ListboxContext = /*#__PURE__*/Symbol('ListboxContext');

function useListboxContext(component) {
  var context = inject(ListboxContext, null);

  if (context === null) {
    var err = new Error("<" + component + " /> is missing a parent <Listbox /> component.");
    if (Error.captureStackTrace) Error.captureStackTrace(err, useListboxContext);
    throw err;
  }

  return context;
} // ---


var Listbox = /*#__PURE__*/defineComponent({
  name: 'Listbox',
  emits: {
    'update:modelValue': function updateModelValue(_value) {
      return true;
    }
  },
  props: {
    as: {
      type: [Object, String],
      "default": 'template'
    },
    disabled: {
      type: [Boolean],
      "default": false
    },
    horizontal: {
      type: [Boolean],
      "default": false
    },
    modelValue: {
      type: [Object, String, Number, Boolean]
    }
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots,
        attrs = _ref.attrs,
        emit = _ref.emit;
    var listboxState = ref(ListboxStates.Closed);
    var labelRef = ref(null);
    var buttonRef = ref(null);
    var optionsRef = ref(null);
    var options = ref([]);
    var searchQuery = ref('');
    var activeOptionIndex = ref(null);
    var value = computed(function () {
      return props.modelValue;
    });
    var api = {
      listboxState: listboxState,
      value: value,
      orientation: computed(function () {
        return props.horizontal ? 'horizontal' : 'vertical';
      }),
      labelRef: labelRef,
      buttonRef: buttonRef,
      optionsRef: optionsRef,
      disabled: computed(function () {
        return props.disabled;
      }),
      options: options,
      searchQuery: searchQuery,
      activeOptionIndex: activeOptionIndex,
      closeListbox: function closeListbox() {
        if (props.disabled) return;
        if (listboxState.value === ListboxStates.Closed) return;
        listboxState.value = ListboxStates.Closed;
        activeOptionIndex.value = null;
      },
      openListbox: function openListbox() {
        if (props.disabled) return;
        if (listboxState.value === ListboxStates.Open) return;
        listboxState.value = ListboxStates.Open;
      },
      goToOption: function goToOption(focus, id) {
        if (props.disabled) return;
        if (listboxState.value === ListboxStates.Closed) return;
        var nextActiveOptionIndex = calculateActiveIndex(focus === Focus.Specific ? {
          focus: Focus.Specific,
          id: id
        } : {
          focus: focus
        }, {
          resolveItems: function resolveItems() {
            return options.value;
          },
          resolveActiveIndex: function resolveActiveIndex() {
            return activeOptionIndex.value;
          },
          resolveId: function resolveId(option) {
            return option.id;
          },
          resolveDisabled: function resolveDisabled(option) {
            return option.dataRef.disabled;
          }
        });
        if (searchQuery.value === '' && activeOptionIndex.value === nextActiveOptionIndex) return;
        searchQuery.value = '';
        activeOptionIndex.value = nextActiveOptionIndex;
      },
      search: function search(value) {
        if (props.disabled) return;
        if (listboxState.value === ListboxStates.Closed) return;
        searchQuery.value += value.toLowerCase();
        var match = options.value.findIndex(function (option) {
          return !option.dataRef.disabled && option.dataRef.textValue.startsWith(searchQuery.value);
        });
        if (match === -1 || match === activeOptionIndex.value) return;
        activeOptionIndex.value = match;
      },
      clearSearch: function clearSearch() {
        if (props.disabled) return;
        if (listboxState.value === ListboxStates.Closed) return;
        if (searchQuery.value === '') return;
        searchQuery.value = '';
      },
      registerOption: function registerOption(id, dataRef) {
        // @ts-expect-error The expected type comes from property 'dataRef' which is declared here on type '{ id: string; dataRef: { textValue: string; disabled: boolean; }; }'
        options.value.push({
          id: id,
          dataRef: dataRef
        });
      },
      unregisterOption: function unregisterOption(id) {
        var nextOptions = options.value.slice();
        var currentActiveOption = activeOptionIndex.value !== null ? nextOptions[activeOptionIndex.value] : null;
        var idx = nextOptions.findIndex(function (a) {
          return a.id === id;
        });
        if (idx !== -1) nextOptions.splice(idx, 1);
        options.value = nextOptions;

        activeOptionIndex.value = function () {
          if (idx === activeOptionIndex.value) return null;
          if (currentActiveOption === null) return null; // If we removed the option before the actual active index, then it would be out of sync. To
          // fix this, we will find the correct (new) index position.

          return nextOptions.indexOf(currentActiveOption);
        }();
      },
      select: function select(value) {
        if (props.disabled) return;
        emit('update:modelValue', value);
      }
    };
    useWindowEvent('mousedown', function (event) {
      var _dom, _dom2, _dom3;

      var target = event.target;
      var active = document.activeElement;
      if (listboxState.value !== ListboxStates.Open) return;
      if ((_dom = dom(buttonRef)) == null ? void 0 : _dom.contains(target)) return;
      if (!((_dom2 = dom(optionsRef)) == null ? void 0 : _dom2.contains(target))) api.closeListbox();
      if (active !== document.body && (active == null ? void 0 : active.contains(target))) return; // Keep focus on newly clicked/focused element

      if (!event.defaultPrevented) (_dom3 = dom(buttonRef)) == null ? void 0 : _dom3.focus({
        preventScroll: true
      });
    }); // @ts-expect-error Types of property 'dataRef' are incompatible.

    provide(ListboxContext, api);
    useOpenClosedProvider(computed(function () {
      var _match;

      return match(listboxState.value, (_match = {}, _match[ListboxStates.Open] = State.Open, _match[ListboxStates.Closed] = State.Closed, _match));
    }));
    return function () {
      var slot = {
        open: listboxState.value === ListboxStates.Open,
        disabled: props.disabled
      };
      return render({
        props: omit(props, ['modelValue', 'onUpdate:modelValue', 'disabled', 'horizontal']),
        slot: slot,
        slots: slots,
        attrs: attrs,
        name: 'Listbox'
      });
    };
  }
}); // ---

var ListboxLabel = /*#__PURE__*/defineComponent({
  name: 'ListboxLabel',
  props: {
    as: {
      type: [Object, String],
      "default": 'label'
    }
  },
  render: function render$1() {
    var api = useListboxContext('ListboxLabel');
    var slot = {
      open: api.listboxState.value === ListboxStates.Open,
      disabled: api.disabled.value
    };
    var propsWeControl = {
      id: this.id,
      ref: 'el',
      onClick: this.handleClick
    };
    return render({
      props: _extends({}, this.$props, propsWeControl),
      slot: slot,
      attrs: this.$attrs,
      slots: this.$slots,
      name: 'ListboxLabel'
    });
  },
  setup: function setup() {
    var api = useListboxContext('ListboxLabel');
    var id = "headlessui-listbox-label-" + useId();
    return {
      id: id,
      el: api.labelRef,
      handleClick: function handleClick() {
        var _dom4;

        (_dom4 = dom(api.buttonRef)) == null ? void 0 : _dom4.focus({
          preventScroll: true
        });
      }
    };
  }
}); // ---

var ListboxButton = /*#__PURE__*/defineComponent({
  name: 'ListboxButton',
  props: {
    as: {
      type: [Object, String],
      "default": 'button'
    }
  },
  render: function render$1() {
    var _dom5, _dom6;

    var api = useListboxContext('ListboxButton');
    var slot = {
      open: api.listboxState.value === ListboxStates.Open,
      disabled: api.disabled.value
    };
    var propsWeControl = {
      ref: 'el',
      id: this.id,
      type: this.type,
      'aria-haspopup': true,
      'aria-controls': (_dom5 = dom(api.optionsRef)) == null ? void 0 : _dom5.id,
      'aria-expanded': api.disabled.value ? undefined : api.listboxState.value === ListboxStates.Open,
      'aria-labelledby': api.labelRef.value ? [(_dom6 = dom(api.labelRef)) == null ? void 0 : _dom6.id, this.id].join(' ') : undefined,
      disabled: api.disabled.value === true ? true : undefined,
      onKeydown: this.handleKeyDown,
      onKeyup: this.handleKeyUp,
      onClick: this.handleClick
    };
    return render({
      props: _extends({}, this.$props, propsWeControl),
      slot: slot,
      attrs: this.$attrs,
      slots: this.$slots,
      name: 'ListboxButton'
    });
  },
  setup: function setup(props, _ref2) {
    var attrs = _ref2.attrs;
    var api = useListboxContext('ListboxButton');
    var id = "headlessui-listbox-button-" + useId();

    function handleKeyDown(event) {
      switch (event.key) {
        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13
        case Keys.Space:
        case Keys.Enter:
        case Keys.ArrowDown:
          event.preventDefault();
          api.openListbox();
          nextTick(function () {
            var _dom7;

            (_dom7 = dom(api.optionsRef)) == null ? void 0 : _dom7.focus({
              preventScroll: true
            });
            if (!api.value.value) api.goToOption(Focus.First);
          });
          break;

        case Keys.ArrowUp:
          event.preventDefault();
          api.openListbox();
          nextTick(function () {
            var _dom8;

            (_dom8 = dom(api.optionsRef)) == null ? void 0 : _dom8.focus({
              preventScroll: true
            });
            if (!api.value.value) api.goToOption(Focus.Last);
          });
          break;
      }
    }

    function handleKeyUp(event) {
      switch (event.key) {
        case Keys.Space:
          // Required for firefox, event.preventDefault() in handleKeyDown for
          // the Space key doesn't cancel the handleKeyUp, which in turn
          // triggers a *click*.
          event.preventDefault();
          break;
      }
    }

    function handleClick(event) {
      if (api.disabled.value) return;

      if (api.listboxState.value === ListboxStates.Open) {
        api.closeListbox();
        nextTick(function () {
          var _dom9;

          return (_dom9 = dom(api.buttonRef)) == null ? void 0 : _dom9.focus({
            preventScroll: true
          });
        });
      } else {
        event.preventDefault();
        api.openListbox();
        nextFrame(function () {
          var _dom10;

          return (_dom10 = dom(api.optionsRef)) == null ? void 0 : _dom10.focus({
            preventScroll: true
          });
        });
      }
    }

    return {
      id: id,
      el: api.buttonRef,
      type: useResolveButtonType(computed(function () {
        return {
          as: props.as,
          type: attrs.type
        };
      }), api.buttonRef),
      handleKeyDown: handleKeyDown,
      handleKeyUp: handleKeyUp,
      handleClick: handleClick
    };
  }
}); // ---

var ListboxOptions = /*#__PURE__*/defineComponent({
  name: 'ListboxOptions',
  props: {
    as: {
      type: [Object, String],
      "default": 'ul'
    },
    "static": {
      type: Boolean,
      "default": false
    },
    unmount: {
      type: Boolean,
      "default": true
    }
  },
  render: function render$1() {
    var _api$options$value$ap, _dom$id, _dom11, _dom12;

    var api = useListboxContext('ListboxOptions');
    var slot = {
      open: api.listboxState.value === ListboxStates.Open
    };
    var propsWeControl = {
      'aria-activedescendant': api.activeOptionIndex.value === null ? undefined : (_api$options$value$ap = api.options.value[api.activeOptionIndex.value]) == null ? void 0 : _api$options$value$ap.id,
      'aria-labelledby': (_dom$id = (_dom11 = dom(api.labelRef)) == null ? void 0 : _dom11.id) != null ? _dom$id : (_dom12 = dom(api.buttonRef)) == null ? void 0 : _dom12.id,
      'aria-orientation': api.orientation.value,
      id: this.id,
      onKeydown: this.handleKeyDown,
      role: 'listbox',
      tabIndex: 0,
      ref: 'el'
    };
    var passThroughProps = this.$props;
    return render({
      props: _extends({}, passThroughProps, propsWeControl),
      slot: slot,
      attrs: this.$attrs,
      slots: this.$slots,
      features: Features.RenderStrategy | Features.Static,
      visible: this.visible,
      name: 'ListboxOptions'
    });
  },
  setup: function setup() {
    var api = useListboxContext('ListboxOptions');
    var id = "headlessui-listbox-options-" + useId();
    var searchDebounce = ref(null);

    function handleKeyDown(event) {
      if (searchDebounce.value) clearTimeout(searchDebounce.value);

      switch (event.key) {
        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12
        // @ts-expect-error Fallthrough is expected here
        case Keys.Space:
          if (api.searchQuery.value !== '') {
            event.preventDefault();
            event.stopPropagation();
            return api.search(event.key);
          }

        // When in type ahead mode, fallthrough

        case Keys.Enter:
          event.preventDefault();
          event.stopPropagation();

          if (api.activeOptionIndex.value !== null) {
            var dataRef = api.options.value[api.activeOptionIndex.value].dataRef;
            api.select(dataRef.value);
          }

          api.closeListbox();
          nextTick(function () {
            var _dom13;

            return (_dom13 = dom(api.buttonRef)) == null ? void 0 : _dom13.focus({
              preventScroll: true
            });
          });
          break;

        case match(api.orientation.value, {
          vertical: Keys.ArrowDown,
          horizontal: Keys.ArrowRight
        }):
          event.preventDefault();
          event.stopPropagation();
          return api.goToOption(Focus.Next);

        case match(api.orientation.value, {
          vertical: Keys.ArrowUp,
          horizontal: Keys.ArrowLeft
        }):
          event.preventDefault();
          event.stopPropagation();
          return api.goToOption(Focus.Previous);

        case Keys.Home:
        case Keys.PageUp:
          event.preventDefault();
          event.stopPropagation();
          return api.goToOption(Focus.First);

        case Keys.End:
        case Keys.PageDown:
          event.preventDefault();
          event.stopPropagation();
          return api.goToOption(Focus.Last);

        case Keys.Escape:
          event.preventDefault();
          event.stopPropagation();
          api.closeListbox();
          nextTick(function () {
            var _dom14;

            return (_dom14 = dom(api.buttonRef)) == null ? void 0 : _dom14.focus({
              preventScroll: true
            });
          });
          break;

        case Keys.Tab:
          event.preventDefault();
          event.stopPropagation();
          break;

        default:
          if (event.key.length === 1) {
            api.search(event.key);
            searchDebounce.value = setTimeout(function () {
              return api.clearSearch();
            }, 350);
          }

          break;
      }
    }

    var usesOpenClosedState = useOpenClosed();
    var visible = computed(function () {
      if (usesOpenClosedState !== null) {
        return usesOpenClosedState.value === State.Open;
      }

      return api.listboxState.value === ListboxStates.Open;
    });
    return {
      id: id,
      el: api.optionsRef,
      handleKeyDown: handleKeyDown,
      visible: visible
    };
  }
});
var ListboxOption = /*#__PURE__*/defineComponent({
  name: 'ListboxOption',
  props: {
    as: {
      type: [Object, String],
      "default": 'li'
    },
    value: {
      type: [Object, String, Number, Boolean]
    },
    disabled: {
      type: Boolean,
      "default": false
    }
  },
  setup: function setup(props, _ref3) {
    var slots = _ref3.slots,
        attrs = _ref3.attrs;
    var api = useListboxContext('ListboxOption');
    var id = "headlessui-listbox-option-" + useId();
    var active = computed(function () {
      return api.activeOptionIndex.value !== null ? api.options.value[api.activeOptionIndex.value].id === id : false;
    });
    var selected = computed(function () {
      return toRaw(api.value.value) === toRaw(props.value);
    });
    var dataRef = ref({
      disabled: props.disabled,
      value: props.value,
      textValue: ''
    });
    onMounted(function () {
      var _document$getElementB, _document$getElementB2;

      var textValue = (_document$getElementB = document.getElementById(id)) == null ? void 0 : (_document$getElementB2 = _document$getElementB.textContent) == null ? void 0 : _document$getElementB2.toLowerCase().trim();
      if (textValue !== undefined) dataRef.value.textValue = textValue;
    });
    onMounted(function () {
      return api.registerOption(id, dataRef);
    });
    onUnmounted(function () {
      return api.unregisterOption(id);
    });
    onMounted(function () {
      watch([api.listboxState, selected], function () {
        var _document$getElementB3;

        if (api.listboxState.value !== ListboxStates.Open) return;
        if (!selected.value) return;
        api.goToOption(Focus.Specific, id);
        (_document$getElementB3 = document.getElementById(id)) == null ? void 0 : _document$getElementB3.focus == null ? void 0 : _document$getElementB3.focus();
      }, {
        immediate: true
      });
    });
    watchEffect(function () {
      if (api.listboxState.value !== ListboxStates.Open) return;
      if (!active.value) return;
      nextTick(function () {
        var _document$getElementB4;

        return (_document$getElementB4 = document.getElementById(id)) == null ? void 0 : _document$getElementB4.scrollIntoView == null ? void 0 : _document$getElementB4.scrollIntoView({
          block: 'nearest'
        });
      });
    });

    function handleClick(event) {
      if (props.disabled) return event.preventDefault();
      api.select(props.value);
      api.closeListbox();
      nextTick(function () {
        var _dom15;

        return (_dom15 = dom(api.buttonRef)) == null ? void 0 : _dom15.focus({
          preventScroll: true
        });
      });
    }

    function handleFocus() {
      if (props.disabled) return api.goToOption(Focus.Nothing);
      api.goToOption(Focus.Specific, id);
    }

    function handleMove() {
      if (props.disabled) return;
      if (active.value) return;
      api.goToOption(Focus.Specific, id);
    }

    function handleLeave() {
      if (props.disabled) return;
      if (!active.value) return;
      api.goToOption(Focus.Nothing);
    }

    return function () {
      var disabled = props.disabled;
      var slot = {
        active: active.value,
        selected: selected.value,
        disabled: disabled
      };
      var propsWeControl = {
        id: id,
        role: 'option',
        tabIndex: disabled === true ? undefined : -1,
        'aria-disabled': disabled === true ? true : undefined,
        'aria-selected': selected.value === true ? selected.value : undefined,
        disabled: undefined,
        onClick: handleClick,
        onFocus: handleFocus,
        onPointermove: handleMove,
        onMousemove: handleMove,
        onPointerleave: handleLeave,
        onMouseleave: handleLeave
      };
      return render({
        props: _extends({}, props, propsWeControl),
        slot: slot,
        attrs: attrs,
        slots: slots,
        name: 'ListboxOption'
      });
    };
  }
});

export { Listbox, ListboxButton, ListboxLabel, ListboxOption, ListboxOptions };
//# sourceMappingURL=listbox.esm.js.map
