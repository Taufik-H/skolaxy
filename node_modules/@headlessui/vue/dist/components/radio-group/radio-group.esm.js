import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { defineComponent, ref, computed, toRaw, provide, onMounted, onUnmounted, inject } from 'vue';
import { render } from '../../utils/render.esm.js';
import { Keys } from '../../keyboard.esm.js';
import { useId } from '../../hooks/use-id.esm.js';
import { focusIn, Focus, FocusResult } from '../../utils/focus-management.esm.js';
import { useDescriptions, Description } from '../description/description.esm.js';
import { dom } from '../../utils/dom.esm.js';
import { useTreeWalker } from '../../hooks/use-tree-walker.esm.js';
import { useLabels, Label } from '../label/label.esm.js';

var RadioGroupContext = /*#__PURE__*/Symbol('RadioGroupContext');

function useRadioGroupContext(component) {
  var context = inject(RadioGroupContext, null);

  if (context === null) {
    var err = new Error("<" + component + " /> is missing a parent <RadioGroup /> component.");
    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext);
    throw err;
  }

  return context;
} // ---


var RadioGroup = /*#__PURE__*/defineComponent({
  name: 'RadioGroup',
  emits: {
    'update:modelValue': function updateModelValue(_value) {
      return true;
    }
  },
  props: {
    as: {
      type: [Object, String],
      "default": 'div'
    },
    disabled: {
      type: [Boolean],
      "default": false
    },
    modelValue: {
      type: [Object, String, Number, Boolean]
    }
  },
  render: function render$1() {
    var _this$$props = this.$props,
        passThroughProps = _objectWithoutPropertiesLoose(_this$$props, ["modelValue", "disabled"]);

    var propsWeControl = {
      ref: 'el',
      id: this.id,
      role: 'radiogroup',
      'aria-labelledby': this.labelledby,
      'aria-describedby': this.describedby,
      onKeydown: this.handleKeyDown
    };
    return render({
      props: _extends({}, passThroughProps, propsWeControl),
      slot: {},
      attrs: this.$attrs,
      slots: this.$slots,
      name: 'RadioGroup'
    });
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var radioGroupRef = ref(null);
    var options = ref([]);
    var labelledby = useLabels({
      name: 'RadioGroupLabel'
    });
    var describedby = useDescriptions({
      name: 'RadioGroupDescription'
    });
    var value = computed(function () {
      return props.modelValue;
    });
    var api = {
      options: options,
      value: value,
      disabled: computed(function () {
        return props.disabled;
      }),
      firstOption: computed(function () {
        return options.value.find(function (option) {
          if (option.propsRef.disabled) return false;
          return true;
        });
      }),
      containsCheckedOption: computed(function () {
        return options.value.some(function (option) {
          return toRaw(option.propsRef.value) === toRaw(props.modelValue);
        });
      }),
      change: function change(nextValue) {
        var _options$value$find;

        if (props.disabled) return false;
        if (value.value === nextValue) return false;
        var nextOption = (_options$value$find = options.value.find(function (option) {
          return toRaw(option.propsRef.value) === toRaw(nextValue);
        })) == null ? void 0 : _options$value$find.propsRef;
        if (nextOption == null ? void 0 : nextOption.disabled) return false;
        emit('update:modelValue', nextValue);
        return true;
      },
      registerOption: function registerOption(action) {
        var _radioGroupRef$value;

        var orderMap = Array.from((_radioGroupRef$value = radioGroupRef.value) == null ? void 0 : _radioGroupRef$value.querySelectorAll('[id^="headlessui-radiogroup-option-"]')).reduce(function (lookup, element, index) {
          var _Object$assign;

          return Object.assign(lookup, (_Object$assign = {}, _Object$assign[element.id] = index, _Object$assign));
        }, {});
        options.value.push(action);
        options.value.sort(function (a, z) {
          return orderMap[a.id] - orderMap[z.id];
        });
      },
      unregisterOption: function unregisterOption(id) {
        var idx = options.value.findIndex(function (radio) {
          return radio.id === id;
        });
        if (idx === -1) return;
        options.value.splice(idx, 1);
      }
    }; // @ts-expect-error ...

    provide(RadioGroupContext, api);
    useTreeWalker({
      container: computed(function () {
        return dom(radioGroupRef);
      }),
      accept: function accept(node) {
        if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT;
        if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP;
        return NodeFilter.FILTER_ACCEPT;
      },
      walk: function walk(node) {
        node.setAttribute('role', 'none');
      }
    });

    function handleKeyDown(event) {
      if (!radioGroupRef.value) return;
      if (!radioGroupRef.value.contains(event.target)) return;
      var all = options.value.filter(function (option) {
        return option.propsRef.disabled === false;
      }).map(function (radio) {
        return radio.element;
      });

      switch (event.key) {
        case Keys.ArrowLeft:
        case Keys.ArrowUp:
          {
            event.preventDefault();
            event.stopPropagation();
            var result = focusIn(all, Focus.Previous | Focus.WrapAround);

            if (result === FocusResult.Success) {
              var activeOption = options.value.find(function (option) {
                return option.element === document.activeElement;
              });
              if (activeOption) api.change(activeOption.propsRef.value);
            }
          }
          break;

        case Keys.ArrowRight:
        case Keys.ArrowDown:
          {
            event.preventDefault();
            event.stopPropagation();

            var _result = focusIn(all, Focus.Next | Focus.WrapAround);

            if (_result === FocusResult.Success) {
              var _activeOption = options.value.find(function (option) {
                return option.element === document.activeElement;
              });

              if (_activeOption) api.change(_activeOption.propsRef.value);
            }
          }
          break;

        case Keys.Space:
          {
            event.preventDefault();
            event.stopPropagation();

            var _activeOption2 = options.value.find(function (option) {
              return option.element === document.activeElement;
            });

            if (_activeOption2) api.change(_activeOption2.propsRef.value);
          }
          break;
      }
    }

    var id = "headlessui-radiogroup-" + useId();
    return {
      id: id,
      labelledby: labelledby,
      describedby: describedby,
      el: radioGroupRef,
      handleKeyDown: handleKeyDown
    };
  }
}); // ---

var OptionState;

(function (OptionState) {
  OptionState[OptionState["Empty"] = 1] = "Empty";
  OptionState[OptionState["Active"] = 2] = "Active";
})(OptionState || (OptionState = {}));

var RadioGroupOption = /*#__PURE__*/defineComponent({
  name: 'RadioGroupOption',
  props: {
    as: {
      type: [Object, String],
      "default": 'div'
    },
    value: {
      type: [Object, String, Number, Boolean]
    },
    disabled: {
      type: Boolean,
      "default": false
    }
  },
  render: function render$1() {
    var _this$$props2 = this.$props,
        passThroughProps = _objectWithoutPropertiesLoose(_this$$props2, ["value", "disabled"]);

    var slot = {
      checked: this.checked,
      disabled: this.disabled,
      active: Boolean(this.state & OptionState.Active)
    };
    var propsWeControl = {
      id: this.id,
      ref: 'el',
      role: 'radio',
      'aria-checked': this.checked ? 'true' : 'false',
      'aria-labelledby': this.labelledby,
      'aria-describedby': this.describedby,
      'aria-disabled': this.disabled ? true : undefined,
      tabIndex: this.tabIndex,
      onClick: this.disabled ? undefined : this.handleClick,
      onFocus: this.disabled ? undefined : this.handleFocus,
      onBlur: this.disabled ? undefined : this.handleBlur
    };
    return render({
      props: _extends({}, passThroughProps, propsWeControl),
      slot: slot,
      attrs: this.$attrs,
      slots: this.$slots,
      name: 'RadioGroupOption'
    });
  },
  setup: function setup(props) {
    var api = useRadioGroupContext('RadioGroupOption');
    var id = "headlessui-radiogroup-option-" + useId();
    var labelledby = useLabels({
      name: 'RadioGroupLabel'
    });
    var describedby = useDescriptions({
      name: 'RadioGroupDescription'
    });
    var optionRef = ref(null);
    var propsRef = computed(function () {
      return {
        value: props.value,
        disabled: props.disabled
      };
    });
    var state = ref(OptionState.Empty);
    onMounted(function () {
      return api.registerOption({
        id: id,
        element: optionRef,
        propsRef: propsRef
      });
    });
    onUnmounted(function () {
      return api.unregisterOption(id);
    });
    var isFirstOption = computed(function () {
      var _api$firstOption$valu;

      return ((_api$firstOption$valu = api.firstOption.value) == null ? void 0 : _api$firstOption$valu.id) === id;
    });
    var disabled = computed(function () {
      return api.disabled.value || props.disabled;
    });
    var checked = computed(function () {
      return toRaw(api.value.value) === toRaw(props.value);
    });
    return {
      id: id,
      el: optionRef,
      labelledby: labelledby,
      describedby: describedby,
      state: state,
      disabled: disabled,
      checked: checked,
      tabIndex: computed(function () {
        if (disabled.value) return -1;
        if (checked.value) return 0;
        if (!api.containsCheckedOption.value && isFirstOption.value) return 0;
        return -1;
      }),
      handleClick: function handleClick() {
        var _optionRef$value;

        if (!api.change(props.value)) return;
        state.value |= OptionState.Active;
        (_optionRef$value = optionRef.value) == null ? void 0 : _optionRef$value.focus();
      },
      handleFocus: function handleFocus() {
        state.value |= OptionState.Active;
      },
      handleBlur: function handleBlur() {
        state.value &= ~OptionState.Active;
      }
    };
  }
}); // ---

var RadioGroupLabel = Label;
var RadioGroupDescription = Description;

export { RadioGroup, RadioGroupDescription, RadioGroupLabel, RadioGroupOption };
//# sourceMappingURL=radio-group.esm.js.map
